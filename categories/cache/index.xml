<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cache - 分类 - 楚兴 - Chuxing's Blog</title><link>https://xzygis.github.io/categories/cache/</link><description>Chuxing's Tech Blog</description><generator>Hugo 0.133.0 &amp; FixIt v0.3.10-08d4c12c</generator><language>zh-CN</language><lastBuildDate>Tue, 28 Mar 2023 23:42:25 +0800</lastBuildDate><atom:link href="https://xzygis.github.io/categories/cache/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis 复制</title><link>https://xzygis.github.io/posts/introduction-to-redis-replication/</link><pubDate>Wed, 01 Feb 2023 22:13:25 +0800</pubDate><guid>https://xzygis.github.io/posts/introduction-to-redis-replication/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>在Redis中，用户可以通过执行SLAVEOF命令或者设置slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave）。 进行复制中的主从服务器双方的数据库将保存相同的数据，概念上</description></item><item><title>Redis 事件</title><link>https://xzygis.github.io/posts/introduction-to-redis-event/</link><pubDate>Wed, 01 Feb 2023 21:34:52 +0800</pubDate><guid>https://xzygis.github.io/posts/introduction-to-redis-event/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>Redis服务器是一个事件驱动程序，服务器需要处理以下两类事件： 文件事件（file event）：Redis服务器通过套接字与客户端（或者其他Redis服务器）进行连接，而文件事件就是服务器对套接字操作的抽象。服务器与客户端（或者其他服务器）的通信会产生相应的文件事件，而服务器则通过监听并处理这些事件</description></item><item><title>Redis 服务器</title><link>https://xzygis.github.io/posts/introduction-to-redis-server/</link><pubDate>Wed, 21 Dec 2022 19:42:15 +0800</pubDate><guid>https://xzygis.github.io/posts/introduction-to-redis-server/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>Redis服务器负责与多个客户端建立网络连接，处理客户端发送的命令请求，在数据库中保存客户端执行命令所产生的数据，并通过资源管理来维持服务器自身的运转。 命令请求的执行过程 发送命令请求 Redis服务器的命令请求来自Redis客户端，当用户在客户端中键入一个命令请求时，客户端会将这个命令请求转换成协议格</description></item><item><title>Redis 客户端</title><link>https://xzygis.github.io/posts/introduction-to-redis-client/</link><pubDate>Mon, 12 Dec 2022 23:07:04 +0800</pubDate><guid>https://xzygis.github.io/posts/introduction-to-redis-client/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>Redis服务器是典型的一对多服务器程序：一个服务器可以与多个客户端建立网络连接，每个客户端可以向服务器发送命令请求，而服务器则接收并处理客户端发送的命令请求，并向客户端返回命令回复。 通过使用由I/O多路复用技术实现的文件事件处理器，Redis服务器使用单线程单进程的方式来处理命令请求，并与多个客户</description></item><item><title>Redis AOF持久化</title><link>https://xzygis.github.io/posts/introduction-to-redis-aof-persistence/</link><pubDate>Sat, 10 Dec 2022 14:21:33 +0800</pubDate><guid>https://xzygis.github.io/posts/introduction-to-redis-aof-persistence/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>除了RDB持久化功能1之外，Redis还提供了AOF（Append Only File）持久化功能。与RDB持久化通过保存数据库中的键值对来记录数据库状态不同，AOF持久化是通过保存Redis服务器所执行的写命令来记录数据库状态的。 服务器在启动时，可以通过载入和执行AOF文件中保存的命令来还原服务器关闭之前的</description></item><item><title>Redis RDB持久化</title><link>https://xzygis.github.io/posts/introduction-to-redis-rdb-persistence/</link><pubDate>Fri, 09 Dec 2022 23:22:14 +0800</pubDate><guid>https://xzygis.github.io/posts/introduction-to-redis-rdb-persistence/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>Redis是一个键值对数据库服务器，服务器中通常包含着任意个非空数据库，而每个非空数据库中又可以包含任意个键值对，为了方便起见，我们将服务器中的非空数据库以及它们的键值对统称为数据库状态。 因为Redis是内存数据库，它将自己的数据库状态储存在内存里面，所以如果不想办法将储存在内存中的数据库状态保存到</description></item><item><title>Redis 服务器数据库实现</title><link>https://xzygis.github.io/posts/redis-server-database-implementation-introduction/</link><pubDate>Thu, 08 Dec 2022 23:39:55 +0800</pubDate><guid>https://xzygis.github.io/posts/redis-server-database-implementation-introduction/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>服务器中的数据库1 Redis服务器将所有数据库都保存在服务器状态redis.h/redisServer结构的db数组中，db数组的每个项都是一个redis.h/redisDb结构，每个redisDb结构代表一个数据库： 1 2 3 4 5 6 struct redisServer { // ... // 一个数组，保存着服务器中的所有数据库 redisDb *db; // ... }; 在初始化服务</description></item><item><title>Redis 对象</title><link>https://xzygis.github.io/posts/introduction-to-redis-object/</link><pubDate>Wed, 07 Dec 2022 20:10:37 +0800</pubDate><guid>https://xzygis.github.io/posts/introduction-to-redis-object/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>在 Redis底层数据结构介绍1 中我们介绍了Redis用到的所有主要数据结构，比如简单动态字符串（SDS）、双端链表、字典、压缩列表、整数集合等等。Redis并没有直接使用这些数据结构来实现键值对数据库，而是基于这些数据结构创建了一个对象系统，这个系统包含字符串对象、列表对象、哈希对象、集合对象和有序</description></item><item><title>Redis 底层数据结构</title><link>https://xzygis.github.io/posts/introduction-to-the-underlying-data-structure-of-redis/</link><pubDate>Wed, 30 Nov 2022 22:03:21 +0000</pubDate><guid>https://xzygis.github.io/posts/introduction-to-the-underlying-data-structure-of-redis/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>简单动态字符串1 每个sds.h/sdshdr结构表示一个SDS值： 1 2 3 4 5 6 7 8 9 struct sdshdr { //记录buf数组中已使用字节的数量 //等于SDS所保存字符串的长度 int len; //记录buf数组中未使用字节的数量 int free; //字节数组，用于保存字符串 char buf[]; }; SDS与C字符串的区别 常数时间复杂度获取字符串长度 杜绝缓冲区溢出</description></item><item><title>Tair:分布式键/值存储系统</title><link>https://xzygis.github.io/posts/tair-a-distributed-key-value-storage-system-developed-by-alibaba-group/</link><pubDate>Sun, 27 Nov 2022 23:11:28 +0000</pubDate><guid>https://xzygis.github.io/posts/tair-a-distributed-key-value-storage-system-developed-by-alibaba-group/</guid><category domain="https://xzygis.github.io/categories/cache/">Cache</category><description>产品概览 Tair 是快速访问内存 (MDB)/持久性 (LDB) 存储服务。 Tair采用高性能、高可用的分布式集群架构，可以满足企业对读写性能和可扩展容量的高要求。 系统架构 Tair 集群具有三个必要的模块：ConfigServer、DataServer 和客户端。 通常，一个 Tair 集群包括两个 ConfigServer 和多个 DataServer。 两个 ConfigServer 充当主服</description></item></channel></rss>