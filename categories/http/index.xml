<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>HTTP - 分类 - 楚兴的技术笔记</title><link>https://xzygis.github.io/categories/http/</link><description>HTTP - 分类 - 楚兴的技术笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xzygis@163.com (chuxing)</managingEditor><webMaster>xzygis@163.com (chuxing)</webMaster><lastBuildDate>Sat, 12 Jun 2021 15:25:21 +0000</lastBuildDate><atom:link href="https://xzygis.github.io/categories/http/" rel="self" type="application/rss+xml"/><item><title>Websocket介绍</title><link>https://xzygis.github.io/posts/introduction-of-websocket/</link><pubDate>Sat, 12 Jun 2021 15:25:21 +0000</pubDate><author>chuxing</author><guid>https://xzygis.github.io/posts/introduction-of-websocket/</guid><description><![CDATA[<h2 id="什么是websocket">什么是WebSocket？</h2>
<p>WebSocket是一种网络传输协议，可在单个TCP连接上进行全双工通信，位于OSI模型的应用层。WebSocket协议在2011年由IETF标准化为RFC 6455，后由RFC 7936补充规范。</p>
<p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。</p>
<h3 id="有哪些优点">有哪些优点？</h3>
<ol>
<li>较少的控制开销。在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。在不包含扩展的情况下，对于服务器到客户端的内容，此头部大小只有2至10字节（和数据包长度有关）；对于客户端到服务器的内容，此头部还需要加上额外的4字节的掩码。相对于HTTP请求每次都要携带完整的头部，此项开销显著减少了。</li>
<li>强的实时性。由于协议是全双工的，所以服务器可以随时主动给客户端下发数据。相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少；即使是和Comet等类似的长轮询比较，其也能在短时间内更多次地传递数据。</li>
<li>保持连接状态。与HTTP不同的是，Websocket需要先创建连接，这就使得其成为一种有状态的协议，之后通信时可以省略部分状态信息。而HTTP请求可能需要在每个请求都携带状态信息（如身份认证等）。</li>
<li>更好的二进制支持。Websocket定义了二进制帧，相对HTTP，可以更轻松地处理二进制内容。</li>
<li>可以支持扩展。Websocket定义了扩展，用户可以扩展协议、实现部分自定义的子协议。如部分浏览器支持压缩等。</li>
</ol>
<h2 id="握手协议">握手协议</h2>
<p>WebSocket是一种与HTTP不同的协议。两者都位于OSI模型的应用层，并且都依赖于传输层的TCP协议。 虽然它们不同，但是RFC 6455中规定：it is designed to work over HTTP ports 80 and 443 as well as to support HTTP proxies and intermediaries（WebSocket通过HTTP端口80和443进行工作，并支持HTTP代理和中介），从而使其与HTTP协议兼容。 为了实现兼容性，WebSocket握手使用HTTP Upgrade头从HTTP协议更改为WebSocket协议。</p>
<h3 id="握手例子">握手例子</h3>
<p>一个典型的Websocket握手请求如下：</p>
<p>客户端请求：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET /chat HTTP/1.1
</span></span><span class="line"><span class="cl">Host: server.example.com
</span></span><span class="line"><span class="cl">Upgrade: websocket
</span></span><span class="line"><span class="cl">Connection: Upgrade
</span></span><span class="line"><span class="cl">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
</span></span><span class="line"><span class="cl">Origin: http://example.com
</span></span><span class="line"><span class="cl">Sec-WebSocket-Protocol: chat, superchat
</span></span><span class="line"><span class="cl">Sec-WebSocket-Version: 13
</span></span></code></pre></td></tr></table>
</div>
</div><p>服务器回应：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">HTTP/1.1 101 Switching Protocols
</span></span><span class="line"><span class="cl">Upgrade: websocket
</span></span><span class="line"><span class="cl">Connection: Upgrade
</span></span><span class="line"><span class="cl">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
</span></span><span class="line"><span class="cl">Sec-WebSocket-Protocol: chat
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="字段说明">字段说明</h3>
<ul>
<li>Connection必须设置Upgrade，表示客户端希望连接升级。</li>
<li>Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。</li>
<li>Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行Base64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。</li>
<li>Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13，之前草案的版本均应当弃用。</li>
<li>Origin字段是必须的。如果缺少origin字段，WebSocket服务器需要回复HTTP 403 状态码（禁止访问）。</li>
</ul>
<h3 id="体验一下">体验一下</h3>
<blockquote>
<p><a href="https://www.websocket.org/echo.html"target="_blank" rel="external nofollow noopener noreferrer">https://www.websocket.org/echo.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p></p>
<p>握手报文：</p>
<p></p>
<p>数据传输：</p>
<p></p>
<h2 id="数据帧">数据帧</h2>
<p>WebSocket客户端、服务端通信的最小单位是帧（frame），由1个或多个帧组成一条完整的消息（message）。</p>
<ul>
<li>发送端：将消息切割成多个帧，并发送给服务端；</li>
<li>接收端：接收消息帧，并将关联的帧重新组装成完整的消息；</li>
</ul>
<h3 id="帧结构">帧结构</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> +-+-+-+-+-------+-+-------------+-------------------------------+
</span></span><span class="line"><span class="cl"> |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
</span></span><span class="line"><span class="cl"> |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
</span></span><span class="line"><span class="cl"> |N|V|V|V|       |S|             |   (if payload len==126/127)   |
</span></span><span class="line"><span class="cl"> | |1|2|3|       |K|             |                               |
</span></span><span class="line"><span class="cl"> +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
</span></span><span class="line"><span class="cl"> |     Extended payload length continued, if payload len == 127  |
</span></span><span class="line"><span class="cl"> + - - - - - - - - - - - - - - - +-------------------------------+
</span></span><span class="line"><span class="cl"> |                               |Masking-key, if MASK set to 1  |
</span></span><span class="line"><span class="cl"> +-------------------------------+-------------------------------+
</span></span><span class="line"><span class="cl"> | Masking-key (continued)       |          Payload Data         |
</span></span><span class="line"><span class="cl"> +-------------------------------- - - - - - - - - - - - - - - - +
</span></span><span class="line"><span class="cl"> :                     Payload Data continued ...                :
</span></span><span class="line"><span class="cl"> + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
</span></span><span class="line"><span class="cl"> |                     Payload Data continued ...                |
</span></span><span class="line"><span class="cl"> +---------------------------------------------------------------+
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="字段说明-1">字段说明</h3>
<p>FIN：1个比特。
如果是1，表示这是消息（message）的最后一个分片（fragment），如果是0，表示不是是消息（message）的最后一个分片（fragment）。</p>
<p>RSV1, RSV2, RSV3：各占1个比特。
一般情况下全为0。当客户端、服务端协商采用WebSocket扩展时，这三个标志位可以非0，且值的含义由扩展进行定义。如果出现非零的值，且并没有采用WebSocket扩展，连接出错。</p>
<p>Opcode: 4个比特。
操作代码，Opcode的值决定了应该如何解析后续的数据载荷（data payload）。如果操作代码是不认识的，那么接收端应该断开连接（fail the connection）。可选的操作代码如下：</p>
<ul>
<li>%x0：表示一个延续帧。当Opcode为0时，表示本次数据传输采用了数据分片，当前收到的数据帧为其中一个数据分片。</li>
<li>%x1：表示这是一个文本帧（frame）</li>
<li>%x2：表示这是一个二进制帧（frame）</li>
<li>%x3-7：保留的操作代码，用于后续定义的非控制帧。</li>
<li>%x8：表示连接断开。</li>
<li>%x9：表示这是一个ping操作。</li>
<li>%xA：表示这是一个pong操作。</li>
<li>%xB-F：保留的操作代码，用于后续定义的控制帧。</li>
</ul>
<p>Mask: 1个比特。
表示是否要对数据载荷进行掩码操作。从客户端向服务端发送数据时，需要对数据进行掩码操作；从服务端向客户端发送数据时，不需要对数据进行掩码操作。
如果服务端接收到的数据没有进行过掩码操作，服务端需要断开连接。
如果Mask是1，那么在Masking-key中会定义一个掩码键（masking key），并用这个掩码键来对数据载荷进行反掩码。所有客户端发送到服务端的数据帧，Mask都是1。
掩码的算法、用途在下一小节讲解。</p>
<p>Payload length：数据载荷的长度，单位是字节。为7位，或7+16位，或1+64位。
假设数Payload length === x，如果</p>
<ul>
<li>x为0~126：数据的长度为x字节。</li>
<li>x为126：后续2个字节代表一个16位的无符号整数，该无符号整数的值为数据的长度。</li>
<li>x为127：后续8个字节代表一个64位的无符号整数（最高位为0），该无符号整数的值为数据的长度。</li>
</ul>
<p>此外，如果payload length占用了多个字节的话，payload length的二进制表达采用网络序（big endian，重要的位在前）。</p>
<p>Masking-key：0或4字节（32位）
所有从客户端传送到服务端的数据帧，数据载荷都进行了掩码操作，Mask为1，且携带了4字节的Masking-key。如果Mask为0，则没有Masking-key。
备注：载荷数据的长度，不包括mask key的长度。</p>
<p>Payload data：(x+y) 字节</p>
<ul>
<li>载荷数据：包括了扩展数据、应用数据。其中，扩展数据x字节，应用数据y字节。</li>
<li>扩展数据：如果没有协商使用扩展的话，扩展数据数据为0字节。所有的扩展都必须声明扩展数据的长度，或者可以如何计算出扩展数据的长度。此外，扩展如何使用必须在握手阶段就协商好。如果扩展数据存在，那么载荷数据长度必须将扩展数据的长度包含在内。</li>
<li>应用数据：任意的应用数据，在扩展数据之后（如果存在扩展数据），占据了数据帧剩余的位置。载荷数据长度 减去 扩展数据长度，就得到应用数据的长度。</li>
</ul>
<h3 id="掩码算法">掩码算法</h3>
<p>掩码键（Masking-key）是由客户端挑选出来的32位的随机数。掩码操作不会影响数据载荷的长度。掩码、反掩码操作都采用如下算法：</p>
<p>首先，预设：</p>
<ul>
<li>original-octet-i：为原始数据的第i字节。</li>
<li>transformed-octet-i：为转换后的数据的第i字节。</li>
<li>j：为i mod 4的结果。</li>
<li>masking-key-octet-j：为mask key第j字节。</li>
</ul>
<p>流程为： original-octet-i 与 masking-key-octet-j 异或后，得到 transformed-octet-i。</p>
<p>伪代码大概是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">var DECODED = &#34;&#34;;
</span></span><span class="line"><span class="cl">for (var i = 0; i &lt; ENCODED.length; i++) {
</span></span><span class="line"><span class="cl">    DECODED[i] = ENCODED[i] ^ MASK[i % 4];
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>数据掩码的作用：
WebSocket 协议中，数据掩码的作用是增强协议的安全性。但数据掩码并不是为了保护数据本身，因为算法本身是公开的，运算也不复杂。除了加密通道本身，似乎没有太多有效的保护通信安全的办法。
那么为什么还要引入掩码计算呢，除了增加计算机器的运算量外似乎并没有太多的收益（这也是不少同学疑惑的点）。
答案还是两个字：安全。但并不是为了防止数据泄密，而是为了防止早期版本的协议中存在的代理缓存污染攻击（proxy cache poisoning attacks）等问题。</p>
<h2 id="数据传递">数据传递</h2>
<p>一旦WebSocket客户端、服务端建立连接后，后续的操作都是基于数据帧的传递。
WebSocket根据opcode来区分操作的类型。比如0x8表示断开连接，0x0-0x2表示数据交互。</p>
<h3 id="数据分片">数据分片</h3>
<p>WebSocket的每条消息可能被切分成多个数据帧。当WebSocket的接收方收到一个数据帧时，会根据FIN的值来判断，是否已经收到消息的最后一个数据帧。
FIN=1表示当前数据帧为消息的最后一个数据帧，此时接收方已经收到完整的消息，可以对消息进行处理。FIN=0，则接收方还需要继续监听接收其余的数据帧。
此外，opcode在数据交换的场景下，表示的是数据的类型。0x01表示文本，0x02表示二进制。而0x00比较特殊，表示延续帧（continuation frame），顾名思义，就是完整消息对应的数据帧还没接收完。</p>
<h3 id="数据分片例子">数据分片例子</h3>
<p>下面例子来自MDN，可以很好地演示数据的分片。客户端向服务端两次发送消息，服务端收到消息后回应客户端，这里主要看客户端往服务端发送的消息。</p>
<p><em>第一条消息</em></p>
<p>FIN=1, 表示是当前消息的最后一个数据帧。服务端收到当前数据帧后，可以处理消息。opcode=0x1，表示客户端发送的是文本类型。</p>
<p><em>第二条消息</em></p>
<ol>
<li>FIN=0，opcode=0x1，表示发送的是文本类型，且消息还没发送完成，还有后续的数据帧。</li>
<li>FIN=0，opcode=0x0，表示消息还没发送完成，还有后续的数据帧，当前的数据帧需要接在上一条数据帧之后。</li>
<li>FIN=1，opcode=0x0，表示消息已经发送完成，没有后续的数据帧，当前的数据帧需要接在上一条数据帧之后。服务端可以将关联的数据帧组装成完整的消息。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Client: FIN=1, opcode=0x1, msg=&#34;hello&#34;
</span></span><span class="line"><span class="cl">Server: (process complete message immediately) Hi.
</span></span><span class="line"><span class="cl">Client: FIN=0, opcode=0x1, msg=&#34;and a&#34;
</span></span><span class="line"><span class="cl">Server: (listening, new message containing text started)
</span></span><span class="line"><span class="cl">Client: FIN=0, opcode=0x0, msg=&#34;happy new&#34;
</span></span><span class="line"><span class="cl">Server: (listening, payload concatenated to previous message)
</span></span><span class="line"><span class="cl">Client: FIN=1, opcode=0x0, msg=&#34;year!&#34;
</span></span><span class="line"><span class="cl">Server: (process complete message) Happy new year to you too!
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="心跳">心跳</h2>
<p>WebSocket 为了保持客户端、服务端的实时双向通信，需要确保客户端、服务端之间的 TCP 通道保持连接没有断开。
对于长时间没有数据往来的连接，如果依旧长时间保持着，可能会浪费包括的连接资源。但不排除有些场景，客户端、服务端虽然长时间没有数据往来，但仍需要保持连接。这个时候，可以采用心跳来实现。</p>
<ul>
<li>发送方 -&gt; 接收方：ping</li>
<li>接收方 -&gt; 发送方：pong</li>
</ul>
<p>ping、pong 的操作，对应的是 WebSocket 的两个控制帧，opcode分别是0x9、0xA。</p>
<h2 id="安全性">安全性</h2>
<p>WebSocket协议中规定在连接建立时检查Upgrade请求中的某些字段（如Origin，查看每次请求是否一致），对于不符合要求的请求立即断开，在通信过程中，也对Frame中的控制位做了很多限制，以便禁止异常连接。
websocket协议中也规定了数据加密传输的方式，允许使用TLS/SSL来对通信加密，默认ws的端口为80，wss端口为433，类似HTTP与HTTPS。</p>
<h2 id="go实战gorilla-websocket">Go实战：Gorilla WebSocket</h2>
<blockquote>
<p>Github：https://github.com/gorilla/websocket</p>
</blockquote>
<p>文件监控例子（当文件被修改后，把文件发给客户端）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">func main() {
</span></span><span class="line"><span class="cl">   http.HandleFunc(&#34;/ws&#34;, serveWs)
</span></span><span class="line"><span class="cl">   if err := http.ListenAndServe(*addr, nil); err != nil {
</span></span><span class="line"><span class="cl">      log.Fatal(err)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">func serveWs(w http.ResponseWriter, r *http.Request) {
</span></span><span class="line"><span class="cl">   //升级为Websocket协议
</span></span><span class="line"><span class="cl">   ws, err := upgrader.Upgrade(w, r, nil)
</span></span><span class="line"><span class="cl">   if err != nil {
</span></span><span class="line"><span class="cl">      if _, ok := err.(websocket.HandshakeError); !ok {
</span></span><span class="line"><span class="cl">         log.Println(err)
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">      return
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   var lastMod time.Time
</span></span><span class="line"><span class="cl">   if n, err := strconv.ParseInt(r.FormValue(&#34;lastMod&#34;), 16, 64); err == nil {
</span></span><span class="line"><span class="cl">      lastMod = time.Unix(0, n)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   go writer(ws, lastMod) //发送数据、Pong
</span></span><span class="line"><span class="cl">   reader(ws) //读数据、处理Ping
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">func writer(ws *websocket.Conn, lastMod time.Time) {
</span></span><span class="line"><span class="cl">   pingTicker := time.NewTicker(pingPeriod)
</span></span><span class="line"><span class="cl">   fileTicker := time.NewTicker(filePeriod)
</span></span><span class="line"><span class="cl">   ...
</span></span><span class="line"><span class="cl">   for {
</span></span><span class="line"><span class="cl">      select {
</span></span><span class="line"><span class="cl">      case &lt;-fileTicker.C:
</span></span><span class="line"><span class="cl">         p, fileModified, err := readFileIfModified(lastMod)
</span></span><span class="line"><span class="cl">         ...
</span></span><span class="line"><span class="cl">         if fileModified {
</span></span><span class="line"><span class="cl">            ws.SetWriteDeadline(time.Now().Add(writeWait))
</span></span><span class="line"><span class="cl">            if err := ws.WriteMessage(websocket.TextMessage, p); err != nil {
</span></span><span class="line"><span class="cl">               return
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">         }
</span></span><span class="line"><span class="cl">      case &lt;-pingTicker.C:
</span></span><span class="line"><span class="cl">         ws.SetWriteDeadline(time.Now().Add(writeWait))
</span></span><span class="line"><span class="cl">         if err := ws.WriteMessage(websocket.PingMessage, []byte{}); err != nil {
</span></span><span class="line"><span class="cl">            return
</span></span><span class="line"><span class="cl">         }
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">func reader(ws *websocket.Conn) {
</span></span><span class="line"><span class="cl">   defer ws.Close()
</span></span><span class="line"><span class="cl">   ws.SetReadLimit(512)
</span></span><span class="line"><span class="cl">   ws.SetReadDeadline(time.Now().Add(pongWait))
</span></span><span class="line"><span class="cl">   ws.SetPongHandler(func(string) error { ws.SetReadDeadline(time.Now().Add(pongWait)); return nil })
</span></span><span class="line"><span class="cl">   for {
</span></span><span class="line"><span class="cl">      _, _, err := ws.ReadMessage()
</span></span><span class="line"><span class="cl">      if err != nil {
</span></span><span class="line"><span class="cl">         break
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中最重要的几个方法是Upgrade、ReadMessage和WriteMessage，下面逐一介绍。</p>
<h3 id="upgrade">Upgrade</h3>
<p>协议升级</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// Upgrade upgrades the HTTP server connection to the WebSocket protocol.
</span></span><span class="line"><span class="cl">func (u *Upgrader) Upgrade(w http.ResponseWriter, r *http.Request, responseHeader http.Header) (*Conn, error) {
</span></span><span class="line"><span class="cl">   const badHandshake = &#34;websocket: the client is not using the websocket protocol: &#34;
</span></span><span class="line"><span class="cl">   //检查必要的头部字段
</span></span><span class="line"><span class="cl">   if !tokenListContainsValue(r.Header, &#34;Connection&#34;, &#34;upgrade&#34;) {
</span></span><span class="line"><span class="cl">      return u.returnError(w, r, http.StatusBadRequest, badHandshake+&#34;&#39;upgrade&#39; token not found in &#39;Connection&#39; header&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if !tokenListContainsValue(r.Header, &#34;Upgrade&#34;, &#34;websocket&#34;) {
</span></span><span class="line"><span class="cl">      return u.returnError(w, r, http.StatusBadRequest, badHandshake+&#34;&#39;websocket&#39; token not found in &#39;Upgrade&#39; header&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if r.Method != &#34;GET&#34; {
</span></span><span class="line"><span class="cl">      return u.returnError(w, r, http.StatusMethodNotAllowed, badHandshake+&#34;request method is not GET&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if !tokenListContainsValue(r.Header, &#34;Sec-Websocket-Version&#34;, &#34;13&#34;) {
</span></span><span class="line"><span class="cl">      return u.returnError(w, r, http.StatusBadRequest, &#34;websocket: unsupported version: 13 not found in &#39;Sec-Websocket-Version&#39; header&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if !checkOrigin(r) {
</span></span><span class="line"><span class="cl">      return u.returnError(w, r, http.StatusForbidden, &#34;websocket: request origin not allowed by Upgrader.CheckOrigin&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   challengeKey := r.Header.Get(&#34;Sec-Websocket-Key&#34;)
</span></span><span class="line"><span class="cl">   if challengeKey == &#34;&#34; {
</span></span><span class="line"><span class="cl">      return u.returnError(w, r, http.StatusBadRequest, &#34;websocket: not a websocket handshake: &#39;Sec-WebSocket-Key&#39; header is missing or blank&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   h, ok := w.(http.Hijacker)
</span></span><span class="line"><span class="cl">   if !ok {
</span></span><span class="line"><span class="cl">      return u.returnError(w, r, http.StatusInternalServerError, &#34;websocket: response does not implement http.Hijacker&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   //创建websocket.Conn
</span></span><span class="line"><span class="cl">   c := newConn(netConn, true, u.ReadBufferSize, u.WriteBufferSize, u.WriteBufferPool, br, writeBuf)
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">   var p []byte
</span></span><span class="line"><span class="cl">   p = append(p, &#34;HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: &#34;...)
</span></span><span class="line"><span class="cl">   p = append(p, computeAcceptKey(challengeKey)...) //计算accept
</span></span><span class="line"><span class="cl">   p = append(p, &#34;\r\n&#34;...)
</span></span><span class="line"><span class="cl">   if c.subprotocol != &#34;&#34; {
</span></span><span class="line"><span class="cl">      p = append(p, &#34;Sec-WebSocket-Protocol: &#34;...)
</span></span><span class="line"><span class="cl">      p = append(p, c.subprotocol...)
</span></span><span class="line"><span class="cl">      p = append(p, &#34;\r\n&#34;...)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if _, err = netConn.Write(p); err != nil {
</span></span><span class="line"><span class="cl">      netConn.Close()
</span></span><span class="line"><span class="cl">      return nil, err
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   return c, nil
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">var keyGUID = []byte(&#34;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#34;)
</span></span><span class="line"><span class="cl">func computeAcceptKey(challengeKey string) string {
</span></span><span class="line"><span class="cl">   h := sha1.New()
</span></span><span class="line"><span class="cl">   h.Write([]byte(challengeKey))
</span></span><span class="line"><span class="cl">   h.Write(keyGUID)
</span></span><span class="line"><span class="cl">   return base64.StdEncoding.EncodeToString(h.Sum(nil))
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">func newConn(conn net.Conn, isServer bool, readBufferSize, writeBufferSize int, writeBufferPool BufferPool, br *bufio.Reader, writeBuf []byte) *Conn {
</span></span><span class="line"><span class="cl">   c := &amp;Conn{
</span></span><span class="line"><span class="cl">      isServer:               isServer,
</span></span><span class="line"><span class="cl">      br:                     br,
</span></span><span class="line"><span class="cl">      conn:                   conn,
</span></span><span class="line"><span class="cl">      mu:                     mu,
</span></span><span class="line"><span class="cl">      readFinal:              true,
</span></span><span class="line"><span class="cl">      writeBuf:               writeBuf,
</span></span><span class="line"><span class="cl">      writePool:              writeBufferPool,
</span></span><span class="line"><span class="cl">      writeBufSize:           writeBufferSize,
</span></span><span class="line"><span class="cl">      enableWriteCompression: true,
</span></span><span class="line"><span class="cl">      compressionLevel:       defaultCompressionLevel,
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   //设置对应的消息处理Handler
</span></span><span class="line"><span class="cl">   c.SetCloseHandler(nil)
</span></span><span class="line"><span class="cl">   c.SetPingHandler(nil)
</span></span><span class="line"><span class="cl">   c.SetPongHandler(nil)
</span></span><span class="line"><span class="cl">   return c
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">func (c *Conn) SetCloseHandler(h func(code int, text string) error) {
</span></span><span class="line"><span class="cl">   if h == nil {
</span></span><span class="line"><span class="cl">      h = func(code int, text string) error {
</span></span><span class="line"><span class="cl">         message := FormatCloseMessage(code, &#34;&#34;)
</span></span><span class="line"><span class="cl">         c.WriteControl(CloseMessage, message, time.Now().Add(writeWait))
</span></span><span class="line"><span class="cl">         return nil
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   c.handleClose = h
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">func (c *Conn) SetPingHandler(h func(appData string) error) {
</span></span><span class="line"><span class="cl">   if h == nil {
</span></span><span class="line"><span class="cl">      h = func(message string) error {
</span></span><span class="line"><span class="cl">         err := c.WriteControl(PongMessage, []byte(message), time.Now().Add(writeWait))
</span></span><span class="line"><span class="cl">         return err
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   c.handlePing = h
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">func (c *Conn) SetPongHandler(h func(appData string) error) {
</span></span><span class="line"><span class="cl">   if h == nil {
</span></span><span class="line"><span class="cl">      h = func(string) error { return nil }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   c.handlePong = h
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="readmessage">ReadMessage</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">func (c *Conn) ReadMessage() (messageType int, p []byte, err error) {
</span></span><span class="line"><span class="cl">   var r io.Reader
</span></span><span class="line"><span class="cl">   messageType, r, err = c.NextReader()
</span></span><span class="line"><span class="cl">   if err != nil {
</span></span><span class="line"><span class="cl">      return messageType, nil, err
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   p, err = ioutil.ReadAll(r)
</span></span><span class="line"><span class="cl">   return messageType, p, err
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">func (c *Conn) NextReader() (messageType int, r io.Reader, err error) {
</span></span><span class="line"><span class="cl">   for c.readErr == nil {
</span></span><span class="line"><span class="cl">       frameType, err := c.advanceFrame()
</span></span><span class="line"><span class="cl">       if err != nil {
</span></span><span class="line"><span class="cl">          c.readErr = hideTempErr(err)
</span></span><span class="line"><span class="cl">          break
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">       if frameType == TextMessage || frameType == BinaryMessage {
</span></span><span class="line"><span class="cl">          c.messageReader = &amp;messageReader{c}
</span></span><span class="line"><span class="cl">          c.reader = c.messageReader
</span></span><span class="line"><span class="cl">          if c.readDecompress {
</span></span><span class="line"><span class="cl">             c.reader = c.newDecompressionReader(c.reader)
</span></span><span class="line"><span class="cl">          }
</span></span><span class="line"><span class="cl">          return frameType, c.reader, nil
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//解析数据帧
</span></span><span class="line"><span class="cl">func (c *Conn) advanceFrame() (int, error) {
</span></span><span class="line"><span class="cl">   p, err := c.read(2)
</span></span><span class="line"><span class="cl">   final := p[0]&amp;finalBit != 0
</span></span><span class="line"><span class="cl">   frameType := int(p[0] &amp; 0xf)
</span></span><span class="line"><span class="cl">   mask := p[1]&amp;maskBit != 0
</span></span><span class="line"><span class="cl">   c.setReadRemaining(int64(p[1] &amp; 0x7f))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   switch frameType {
</span></span><span class="line"><span class="cl">   case CloseMessage, PingMessage, PongMessage:
</span></span><span class="line"><span class="cl">      if c.readRemaining &gt; maxControlFramePayloadSize {
</span></span><span class="line"><span class="cl">         return noFrame, c.handleProtocolError(&#34;control frame length &gt; 125&#34;)
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">      if !final {
</span></span><span class="line"><span class="cl">         return noFrame, c.handleProtocolError(&#34;control frame not final&#34;)
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   case TextMessage, BinaryMessage:
</span></span><span class="line"><span class="cl">      if !c.readFinal {
</span></span><span class="line"><span class="cl">         return noFrame, c.handleProtocolError(&#34;message start before final message frame&#34;)
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">      c.readFinal = final
</span></span><span class="line"><span class="cl">   case continuationFrame:
</span></span><span class="line"><span class="cl">      if c.readFinal {
</span></span><span class="line"><span class="cl">         return noFrame, c.handleProtocolError(&#34;continuation after final message frame&#34;)
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">      c.readFinal = final
</span></span><span class="line"><span class="cl">   default:
</span></span><span class="line"><span class="cl">      return noFrame, c.handleProtocolError(&#34;unknown opcode &#34; + strconv.Itoa(frameType))
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   switch c.readRemaining {
</span></span><span class="line"><span class="cl">   case 126:
</span></span><span class="line"><span class="cl">      p, err := c.read(2)
</span></span><span class="line"><span class="cl">      if err := c.setReadRemaining(int64(binary.BigEndian.Uint16(p))); err != nil {
</span></span><span class="line"><span class="cl">         return noFrame, err
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   case 127:
</span></span><span class="line"><span class="cl">      p, err := c.read(8)
</span></span><span class="line"><span class="cl">      if err != nil {
</span></span><span class="line"><span class="cl">         return noFrame, err
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      if err := c.setReadRemaining(int64(binary.BigEndian.Uint64(p))); err != nil {
</span></span><span class="line"><span class="cl">         return noFrame, err
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if mask != c.isServer {
</span></span><span class="line"><span class="cl">      return noFrame, c.handleProtocolError(&#34;incorrect mask flag&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if mask {
</span></span><span class="line"><span class="cl">      c.readMaskPos = 0
</span></span><span class="line"><span class="cl">      p, err := c.read(len(c.readMaskKey))
</span></span><span class="line"><span class="cl">      if err != nil {
</span></span><span class="line"><span class="cl">         return noFrame, err
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">      copy(c.readMaskKey[:], p)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   //处理控制帧
</span></span><span class="line"><span class="cl">   switch frameType {
</span></span><span class="line"><span class="cl">   case PongMessage:
</span></span><span class="line"><span class="cl">      if err := c.handlePong(string(payload)); err != nil {
</span></span><span class="line"><span class="cl">         return noFrame, err
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   case PingMessage:
</span></span><span class="line"><span class="cl">      if err := c.handlePing(string(payload)); err != nil {
</span></span><span class="line"><span class="cl">         return noFrame, err
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   case CloseMessage:
</span></span><span class="line"><span class="cl">      closeCode := CloseNoStatusReceived
</span></span><span class="line"><span class="cl">      closeText := &#34;&#34;
</span></span><span class="line"><span class="cl">      if len(payload) &gt;= 2 {
</span></span><span class="line"><span class="cl">         closeCode = int(binary.BigEndian.Uint16(payload))
</span></span><span class="line"><span class="cl">         if !isValidReceivedCloseCode(closeCode) {
</span></span><span class="line"><span class="cl">            return noFrame, c.handleProtocolError(&#34;invalid close code&#34;)
</span></span><span class="line"><span class="cl">         }
</span></span><span class="line"><span class="cl">         closeText = string(payload[2:])
</span></span><span class="line"><span class="cl">         if !utf8.ValidString(closeText) {
</span></span><span class="line"><span class="cl">            return noFrame, c.handleProtocolError(&#34;invalid utf8 payload in close frame&#34;)
</span></span><span class="line"><span class="cl">         }
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">      if err := c.handleClose(closeCode, closeText); err != nil {
</span></span><span class="line"><span class="cl">         return noFrame, err
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">      return noFrame, &amp;CloseError{Code: closeCode, Text: closeText}
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   return frameType, nil
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="writemessage">WriteMessage</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">func (c *Conn) WriteMessage(messageType int, data []byte) error {
</span></span><span class="line"><span class="cl">   var mw messageWriter
</span></span><span class="line"><span class="cl">   // beginMessage prepares a connection and message writer for a new message.
</span></span><span class="line"><span class="cl">    if err := c.beginMessage(&amp;mw, messageType); err != nil {
</span></span><span class="line"><span class="cl">       return err
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    n := copy(c.writeBuf[mw.pos:], data)
</span></span><span class="line"><span class="cl">    mw.pos += n
</span></span><span class="line"><span class="cl">    data = data[n:]
</span></span><span class="line"><span class="cl">    return mw.flushFrame(true, data)
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//组装数据帧
</span></span><span class="line"><span class="cl">func (w *messageWriter) flushFrame(final bool, extra []byte) error {
</span></span><span class="line"><span class="cl">   c := w.c
</span></span><span class="line"><span class="cl">   length := w.pos - maxFrameHeaderSize + len(extra)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   b0 := byte(w.frameType)
</span></span><span class="line"><span class="cl">   if final {
</span></span><span class="line"><span class="cl">      b0 |= finalBit
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   if w.compress {
</span></span><span class="line"><span class="cl">      b0 |= rsv1Bit
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   w.compress = false
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   b1 := byte(0)
</span></span><span class="line"><span class="cl">   if !c.isServer {
</span></span><span class="line"><span class="cl">      b1 |= maskBit
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   // Assume that the frame starts at beginning of c.writeBuf.
</span></span><span class="line"><span class="cl">   framePos := 0
</span></span><span class="line"><span class="cl">   if c.isServer {
</span></span><span class="line"><span class="cl">      // Adjust up if mask not included in the header.
</span></span><span class="line"><span class="cl">      framePos = 4
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   switch {
</span></span><span class="line"><span class="cl">   case length &gt;= 65536:
</span></span><span class="line"><span class="cl">      c.writeBuf[framePos] = b0
</span></span><span class="line"><span class="cl">      c.writeBuf[framePos+1] = b1 | 127
</span></span><span class="line"><span class="cl">      binary.BigEndian.PutUint64(c.writeBuf[framePos+2:], uint64(length))
</span></span><span class="line"><span class="cl">   case length &gt; 125:
</span></span><span class="line"><span class="cl">      framePos += 6
</span></span><span class="line"><span class="cl">      c.writeBuf[framePos] = b0
</span></span><span class="line"><span class="cl">      c.writeBuf[framePos+1] = b1 | 126
</span></span><span class="line"><span class="cl">      binary.BigEndian.PutUint16(c.writeBuf[framePos+2:], uint16(length))
</span></span><span class="line"><span class="cl">   default:
</span></span><span class="line"><span class="cl">      framePos += 8
</span></span><span class="line"><span class="cl">      c.writeBuf[framePos] = b0
</span></span><span class="line"><span class="cl">      c.writeBuf[framePos+1] = b1 | byte(length)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if !c.isServer {
</span></span><span class="line"><span class="cl">      key := newMaskKey()
</span></span><span class="line"><span class="cl">      copy(c.writeBuf[maxFrameHeaderSize-4:], key[:])
</span></span><span class="line"><span class="cl">      maskBytes(key, 0, c.writeBuf[maxFrameHeaderSize:w.pos])
</span></span><span class="line"><span class="cl">      if len(extra) &gt; 0 {
</span></span><span class="line"><span class="cl">         return w.endMessage(c.writeFatal(errors.New(&#34;websocket: internal error, extra used in client mode&#34;)))
</span></span><span class="line"><span class="cl">      }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   // Write the buffers to the connection with best-effort detection of
</span></span><span class="line"><span class="cl">   // concurrent writes. See the concurrency section in the package
</span></span><span class="line"><span class="cl">   // documentation for more info.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   if c.isWriting {
</span></span><span class="line"><span class="cl">      panic(&#34;concurrent write to websocket connection&#34;)
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   c.isWriting = true
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   err := c.write(w.frameType, c.writeDeadline, c.writeBuf[framePos:w.pos], extra)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   ...
</span></span><span class="line"><span class="cl">   return nil
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Ref：</p>
<ul>
<li><a href="https://datatracker.ietf.org/doc/html/rfc6455#"target="_blank" rel="external nofollow noopener noreferrer">https://datatracker.ietf.org/doc/html/rfc6455#<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://zh.wikipedia.org/wiki/WebSocket"target="_blank" rel="external nofollow noopener noreferrer">https://zh.wikipedia.org/wiki/WebSocket<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html"target="_blank" rel="external nofollow noopener noreferrer">http://www.ruanyifeng.com/blog/2017/05/websocket.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://pkg.go.dev/github.com/gorilla/websocket"target="_blank" rel="external nofollow noopener noreferrer">https://pkg.go.dev/github.com/gorilla/websocket<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item><item><title>JSON Web Token入门手册</title><link>https://xzygis.github.io/posts/usage-of-json-web-token/</link><pubDate>Thu, 30 Jan 2020 13:10:39 +0000</pubDate><author>chuxing</author><guid>https://xzygis.github.io/posts/usage-of-json-web-token/</guid><description><![CDATA[<h2 id="跨域认证问题">跨域认证问题</h2>
<p>互联网服务离不开用户认证。一般流程是下面这样：</p>
<ol>
<li>用户向服务器发送用户名和密码。</li>
<li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</li>
<li>服务器向用户返回一个 session_id，写入用户的 Cookie。</li>
<li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</li>
<li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li>
</ol>
<p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p>
<p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p>
<ul>
<li>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</li>
<li>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</li>
</ul>
<h2 id="什么是jwt">什么是JWT？</h2>
<p>Json web token (JWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519)。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token可直接被用于认证，也可被加密。</p>
<h2 id="jwt-的原理">JWT 的原理</h2>
<p>服务器认证以后，生成一个经过签名的 JSON 对象，发回给用户，服务器则不用保存任何 session 数据了。从而把服务器变成无状态的，易于实现扩展。</p>
<h2 id="jwt-的使用场景">JWT 的使用场景</h2>
<p>以下是两个JWT的应用场景：</p>
<ol>
<li>鉴权：这是JWT最常见的应用场景。当用户登录成功后，随后的每个请求都将带上JWT，从而允许用户访问被授权的服务和资源。由于它开销小切易于使用，当前被广泛应用于单点登录（Single Sign On）。</li>
<li>信息交换：JWT是不同组织间交换信息的一种很好的方式。因为JWT可以被签名（例如，通过公钥/私钥对），你可以确信信息发送者就是它们说声明的身份。此外，签名是用Header和Payload计算出来的，你可以验证内容是否被篡改。</li>
</ol>
<h2 id="jwt-的数据结构">JWT 的数据结构</h2>
<p>扁平化形式的JWT是由通过 <code>.</code> 分隔的三部分组成，他们分别是：</p>
<ul>
<li><code>Header</code></li>
<li><code>Payload</code></li>
<li><code>Signature</code></li>
</ul>
<p>所以，一个JWT看起来通常是如下的形式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">xxxxx.yyyyy.zzzzz
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="header">Header</h3>
<p>头部由两部分组成：</p>
<ul>
<li>token类型，即JWT；</li>
<li>签名算法，例如HMAC SHA256或RSA。</li>
</ul>
<p>一个Header的例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;alg&#34;</span><span class="p">:</span> <span class="s2">&#34;HS256&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;typ&#34;</span><span class="p">:</span> <span class="s2">&#34;JWT&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>随后，以上JSON对象会通过 <code>Base64Url</code> 编码为JWT的第一部分。</p>
<h3 id="payload">Payload</h3>
<p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p>
<ul>
<li>标准中注册的声明</li>
<li>公共的声明</li>
<li>私有的声明</li>
</ul>
<p><strong>标准中注册的声明：</strong></p>
<ul>
<li>iss: jwt签发者</li>
<li>sub: jwt所面向的用户</li>
<li>aud: 接收jwt的一方</li>
<li>exp: jwt的过期时间，这个过期时间必须要大于签发时间</li>
<li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li>
<li>iat: jwt的签发时间</li>
<li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li>
</ul>
<p><strong>公共的声明 ：</strong>
公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密。</p>
<p><strong>私有的声明 ：</strong>
私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>
<p>一个Payload的例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;sub&#34;</span><span class="p">:</span> <span class="s2">&#34;1234567890&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Doe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;admin&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>随后，Payload会通过 <code>Base64Url</code> 编码为JWT的第二部分。</p>
<h3 id="signature">Signature</h3>
<p>创建签名需要用到编码后的 Header、编码后的 Payload、秘钥、Header中指定的算法。</p>
<p>如果你想使用HMAC SHA256算法，签名将通过如下方式生成：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nf">HMACSHA256</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nf">base64UrlEncode</span><span class="p">(</span><span class="nx">header</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#34;.&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">  <span class="nf">base64UrlEncode</span><span class="p">(</span><span class="nx">payload</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="nx">secret</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你想把以上概念付诸实践，可以通过 <a href="https://jwt.io/"target="_blank" rel="external nofollow noopener noreferrer">https://jwt.io/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 提供的工具来玩一玩 JWT 。如下图所示：
</p>
<h2 id="jwt-的使用方式">JWT 的使用方式</h2>
<p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。
此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">Authorization</span><span class="o">:</span> <span class="nx">Bearer</span> <span class="o">&lt;</span><span class="nx">token</span><span class="o">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p>
<h2 id="jwt-的几个特点">JWT 的几个特点</h2>
<ul>
<li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li>
<li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li>
<li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li>
<li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</li>
<li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li>
<li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li>
</ul>
<h2 id="示例代码">示例代码</h2>
<p>Go语言版本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">util</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;crypto/rsa&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;crypto/x509&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/pem&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;errors&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/dgrijalva/jwt-go&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">ErrVerifyFailed</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;verify failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//https://godoc.org/github.com/dgrijalva/jwt-go#example-New--Hmac
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">CreateToken</span><span class="p">(</span><span class="nx">claims</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">MapClaims</span><span class="p">,</span> <span class="nx">privateKey</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">token</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">NewWithClaims</span><span class="p">(</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">SigningMethodRS512</span><span class="p">,</span> <span class="nx">claims</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">block</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">pem</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">block</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;private key error&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">priv</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">x509</span><span class="p">.</span><span class="nf">ParsePKCS8PrivateKey</span><span class="p">(</span><span class="nx">block</span><span class="p">.</span><span class="nx">Bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">token</span><span class="p">.</span><span class="nf">SignedString</span><span class="p">(</span><span class="nx">priv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//https://godoc.org/github.com/dgrijalva/jwt-go#example-Parse--Hmac
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">VerifyToken</span><span class="p">(</span><span class="nx">tokenString</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">publicKey</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">MapClaims</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">token</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="nx">tokenString</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">token</span> <span class="o">*</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">Token</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Method</span><span class="p">.(</span><span class="o">*</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">SigningMethodRSA</span><span class="p">);</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unexpected signing method: %v&#34;</span><span class="p">,</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Header</span><span class="p">[</span><span class="s">&#34;alg&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Header</span><span class="p">[</span><span class="s">&#34;alg&#34;</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#34;RS512&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unexpected siging alg: %v&#34;</span><span class="p">,</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Header</span><span class="p">[</span><span class="s">&#34;alg&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">block</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">pem</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">publicKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">block</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrVerifyFailed</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">pubInterface</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">x509</span><span class="p">.</span><span class="nf">ParsePKIXPublicKey</span><span class="p">(</span><span class="nx">block</span><span class="p">.</span><span class="nx">Bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrVerifyFailed</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">pub</span> <span class="o">:=</span> <span class="nx">pubInterface</span><span class="p">.(</span><span class="o">*</span><span class="nx">rsa</span><span class="p">.</span><span class="nx">PublicKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">pub</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrVerifyFailed</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">claims</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Claims</span><span class="p">.(</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">MapClaims</span><span class="p">);</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">claims</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrVerifyFailed</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>参考来源：</p>
<ol>
<li><a href="https://jwt.io/introduction/"target="_blank" rel="external nofollow noopener noreferrer">https://jwt.io/introduction/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.jianshu.com/p/576dbf44b2ae"target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/576dbf44b2ae<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html"target="_blank" rel="external nofollow noopener noreferrer">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ol>
]]></description></item><item><title>API网关概述</title><link>https://xzygis.github.io/posts/introduction-of-api-gateway/</link><pubDate>Mon, 27 Jan 2020 22:51:43 +0000</pubDate><author>chuxing</author><guid>https://xzygis.github.io/posts/introduction-of-api-gateway/</guid><description><![CDATA[<h2 id="1-背景">1 背景</h2>
<ul>
<li>由于后端的微服务拆分，客户端通常需要请求多个服务获取所需数据。</li>
<li>不同客户端所需要的数据不一样。例如，PC需要的数据通常比移动端更加详细。</li>
<li>不同客户端网络环境差异大。例如，WAN vs LAN，移动网络 vs 非移动网络。</li>
<li>服务端实例的地址信息（IP + port）会动态更新。</li>
<li>微服务的拆分逻辑会变化，这种变化应该应该对客户端透明。</li>
<li>不同的服务可能采用不同的协议，有些协议是非web的。</li>
</ul>
<h2 id="2-什么是api网关">2 什么是API网关？</h2>
<p>API网关接收客户端的所有请求，并将请求路由到相应的后端服务，并提供接口聚合和协议转换。通常来说，API网关通过调用多个后端服务，并聚合结果的方式处理请求。它可将web协议转化为非web的内部后台协议。</p>
<p>核心功能：</p>
<ul>
<li>服务发现：</li>
<li>负载均衡：以某种算法分摊系统压力。</li>
<li>服务熔断：直接返回失败或者执行降价逻辑，防止雪崩。</li>
<li>流量控制：防止短时间内大量请求转发到后台压垮服务器。</li>
<li>认证鉴权：验证客户端的请求是否被授权。</li>
<li>灰度发布：</li>
</ul>
<p>其他功能：</p>
<ul>
<li>协议转换：web协议转非Web协议。</li>
<li>参数校验：对入参设置校验规则，由网关根据规则对无效请求进行过滤。</li>
<li>API管理：包括 API 的创建、测试、发布、下线、版本切换等。</li>
<li>监控告警：监控API请求次数、API调用延迟和API错误信息。</li>
<li>SDK生成：</li>
</ul>
<h2 id="3-实现方式">3 实现方式</h2>
<p>将API网关作为客户端的唯一接入点。API网关主要有两种类型：</p>
<ul>
<li>one-size-fits-all网关</li>
<li>Backends for frontends网关</li>
</ul>
<h3 id="31-one-size-fits-all网关">3.1 One-size-fits-all网关</h3>
<p>简单地将请求路由到相应服务。将请求扇出到多个后端服务。
</p>
<h3 id="32-backends-for-fronts网关">3.2 Backends for fronts网关</h3>
<p>为每种客户端暴露不同的API。为每种客户端设计一个API网关，每个API网关为其客户端提供一种API。
</p>
<h2 id="4-优点">4 优点</h2>
<ul>
<li>使后端的微服务拆分对客户端透明。</li>
<li>客户端无需关心后端服务的实例地址（IP + port）。</li>
<li>可为每个客户端提供最优API。</li>
<li>减少请求次数。</li>
<li>简化客户端的逻辑（由调用多个后台服务变为只调用API网关）。</li>
<li>可将标准的Web API协议转化为任意的后端协议。</li>
</ul>
<h2 id="5-缺点">5 缺点</h2>
<ul>
<li>增加复杂性。增加了API网关模块，带来了额外的开发、部署、管理成本。</li>
<li>增加响应时间。调用链路多了一跳（API网关）。</li>
</ul>
<blockquote>
<p><strong>Issues:</strong></p>
<p>How implement the API gateway?</p>
<p>event-driven/reactive approach is the best if it must scale to handle high loads.</p>
</blockquote>
<p>参考来源：</p>
<ul>
<li><a href="https://microservices.io/patterns/apigateway.html"target="_blank" rel="external nofollow noopener noreferrer">https://microservices.io/patterns/apigateway.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.nginx.com/learn/api-gateway/"target="_blank" rel="external nofollow noopener noreferrer">https://www.nginx.com/learn/api-gateway/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://aws.amazon.com/cn/api-gateway/features/"target="_blank" rel="external nofollow noopener noreferrer">https://aws.amazon.com/cn/api-gateway/features/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://cloud.tencent.com/document/product/628/11755"target="_blank" rel="external nofollow noopener noreferrer">https://cloud.tencent.com/document/product/628/11755<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item></channel></rss>