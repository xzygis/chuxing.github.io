<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>websocket - 标签 - 楚兴 - Chuxing's Blog</title><link>https://xzygis.github.io/tags/websocket/</link><description>websocket - 标签 - 楚兴 - Chuxing's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xzygis@163.com (chuxing)</managingEditor><webMaster>xzygis@163.com (chuxing)</webMaster><lastBuildDate>Sat, 12 Jun 2021 15:25:21 +0000</lastBuildDate><atom:link href="https://xzygis.github.io/tags/websocket/" rel="self" type="application/rss+xml"/><item><title>Websocket介绍</title><link>https://xzygis.github.io/posts/introduction-of-websocket/</link><pubDate>Sat, 12 Jun 2021 15:25:21 +0000</pubDate><author>chuxing</author><guid>https://xzygis.github.io/posts/introduction-of-websocket/</guid><description><![CDATA[<h2 id="什么是websocket">什么是WebSocket？</h2>
<p>WebSocket是一种网络传输协议，可在单个TCP连接上进行全双工通信，位于OSI模型的应用层。WebSocket协议在2011年由IETF标准化为RFC 6455，后由RFC 7936补充规范。</p>
<p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。</p>
<h3 id="有哪些优点">有哪些优点？</h3>
<ol>
<li>较少的控制开销。在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。在不包含扩展的情况下，对于服务器到客户端的内容，此头部大小只有2至10字节（和数据包长度有关）；对于客户端到服务器的内容，此头部还需要加上额外的4字节的掩码。相对于HTTP请求每次都要携带完整的头部，此项开销显著减少了。</li>
<li>强的实时性。由于协议是全双工的，所以服务器可以随时主动给客户端下发数据。相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少；即使是和Comet等类似的长轮询比较，其也能在短时间内更多次地传递数据。</li>
<li>保持连接状态。与HTTP不同的是，Websocket需要先创建连接，这就使得其成为一种有状态的协议，之后通信时可以省略部分状态信息。而HTTP请求可能需要在每个请求都携带状态信息（如身份认证等）。</li>
<li>更好的二进制支持。Websocket定义了二进制帧，相对HTTP，可以更轻松地处理二进制内容。</li>
<li>可以支持扩展。Websocket定义了扩展，用户可以扩展协议、实现部分自定义的子协议。如部分浏览器支持压缩等。</li>
</ol>
<h2 id="握手协议">握手协议</h2>
<p>WebSocket是一种与HTTP不同的协议。两者都位于OSI模型的应用层，并且都依赖于传输层的TCP协议。 虽然它们不同，但是RFC 6455中规定：it is designed to work over HTTP ports 80 and 443 as well as to support HTTP proxies and intermediaries（WebSocket通过HTTP端口80和443进行工作，并支持HTTP代理和中介），从而使其与HTTP协议兼容。 为了实现兼容性，WebSocket握手使用HTTP Upgrade头从HTTP协议更改为WebSocket协议。</p>
<h3 id="握手例子">握手例子</h3>
<p>一个典型的Websocket握手请求如下：</p>
<p>客户端请求：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET /chat HTTP/1.1
</span></span><span class="line"><span class="cl">Host: server.example.com
</span></span><span class="line"><span class="cl">Upgrade: websocket
</span></span><span class="line"><span class="cl">Connection: Upgrade
</span></span><span class="line"><span class="cl">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
</span></span><span class="line"><span class="cl">Origin: http://example.com
</span></span><span class="line"><span class="cl">Sec-WebSocket-Protocol: chat, superchat
</span></span><span class="line"><span class="cl">Sec-WebSocket-Version: 13</span></span></code></pre></td></tr></table>
</div>
</div><p>服务器回应：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">HTTP/1.1 101 Switching Protocols
</span></span><span class="line"><span class="cl">Upgrade: websocket
</span></span><span class="line"><span class="cl">Connection: Upgrade
</span></span><span class="line"><span class="cl">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
</span></span><span class="line"><span class="cl">Sec-WebSocket-Protocol: chat</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="字段说明">字段说明</h3>
<ul>
<li>Connection必须设置Upgrade，表示客户端希望连接升级。</li>
<li>Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。</li>
<li>Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行Base64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。</li>
<li>Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13，之前草案的版本均应当弃用。</li>
<li>Origin字段是必须的。如果缺少origin字段，WebSocket服务器需要回复HTTP 403 状态码（禁止访问）。</li>
</ul>
<h3 id="体验一下">体验一下</h3>
<blockquote>
<p><a href="https://www.websocket.org/echo.html"target="_blank" rel="external nofollow noopener noreferrer">https://www.websocket.org/echo.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><img loading="lazy" src="/posts/introduction-of-websocket/websocket.org-1.png" srcset="/posts/introduction-of-websocket/websocket.org-1.png?size=small, /posts/introduction-of-websocket/websocket.org-1.png?size=medium 1.5x, /posts/introduction-of-websocket/websocket.org-1.png?size=large 2x" sizes="auto" data-title="Connect" data-alt="Connect" style="--width: 1280px;--aspect-ratio: 1280 / 594;background: url(/svg/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;this.alt=this.dataset.alt;for(const i of ['style', 'data-title','data-alt','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;this.alt=this.dataset.alt;for(const i of ['style', 'data-title','data-alt','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>握手报文：</p>
<p><img loading="lazy" src="/posts/introduction-of-websocket/websocket.org-2.png" srcset="/posts/introduction-of-websocket/websocket.org-2.png?size=small, /posts/introduction-of-websocket/websocket.org-2.png?size=medium 1.5x, /posts/introduction-of-websocket/websocket.org-2.png?size=large 2x" sizes="auto" data-title="握手报文" data-alt="握手报文" style="--width: 1280px;--aspect-ratio: 1280 / 1104;background: url(/svg/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;this.alt=this.dataset.alt;for(const i of ['style', 'data-title','data-alt','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;this.alt=this.dataset.alt;for(const i of ['style', 'data-title','data-alt','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>数据传输：</p>
<p><img loading="lazy" src="/posts/introduction-of-websocket/websocket.org-3.png" srcset="/posts/introduction-of-websocket/websocket.org-3.png?size=small, /posts/introduction-of-websocket/websocket.org-3.png?size=medium 1.5x, /posts/introduction-of-websocket/websocket.org-3.png?size=large 2x" sizes="auto" data-title="握手报文" data-alt="握手报文" style="--width: 1280px;--aspect-ratio: 1280 / 911;background: url(/svg/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;this.alt=this.dataset.alt;for(const i of ['style', 'data-title','data-alt','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;this.alt=this.dataset.alt;for(const i of ['style', 'data-title','data-alt','onerror','onload']){this.removeAttribute(i);}"/></p>
<h2 id="数据帧">数据帧</h2>
<p>WebSocket客户端、服务端通信的最小单位是帧（frame），由1个或多个帧组成一条完整的消息（message）。</p>
<ul>
<li>发送端：将消息切割成多个帧，并发送给服务端；</li>
<li>接收端：接收消息帧，并将关联的帧重新组装成完整的消息；</li>
</ul>
<h3 id="帧结构">帧结构</h3>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"> <span class="o">+-+-+-+-+-------+-+-------------+-------------------------------+</span>
</span></span><span class="line"><span class="cl"> <span class="o">|</span><span class="n">F</span><span class="o">|</span><span class="n">R</span><span class="o">|</span><span class="n">R</span><span class="o">|</span><span class="n">R</span><span class="o">|</span> <span class="n">opcode</span><span class="o">|</span><span class="n">M</span><span class="o">|</span> <span class="n">Payload</span> <span class="n">len</span> <span class="o">|</span>    <span class="n">Extended</span> <span class="n">payload</span> <span class="n">length</span>    <span class="o">|</span>
</span></span><span class="line"><span class="cl"> <span class="o">|</span><span class="n">I</span><span class="o">|</span><span class="n">S</span><span class="o">|</span><span class="n">S</span><span class="o">|</span><span class="n">S</span><span class="o">|</span>  <span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="o">|</span><span class="n">A</span><span class="o">|</span>     <span class="p">(</span><span class="mi">7</span><span class="p">)</span>     <span class="o">|</span>             <span class="p">(</span><span class="mi">16</span><span class="o">/</span><span class="mi">64</span><span class="p">)</span>           <span class="o">|</span>
</span></span><span class="line"><span class="cl"> <span class="o">|</span><span class="n">N</span><span class="o">|</span><span class="n">V</span><span class="o">|</span><span class="n">V</span><span class="o">|</span><span class="n">V</span><span class="o">|</span>       <span class="o">|</span><span class="n">S</span><span class="o">|</span>             <span class="o">|</span>   <span class="p">(</span><span class="k">if</span> <span class="n">payload</span> <span class="n">len</span><span class="o">==</span><span class="mi">126</span><span class="o">/</span><span class="mi">127</span><span class="p">)</span>   <span class="o">|</span>
</span></span><span class="line"><span class="cl"> <span class="o">|</span> <span class="o">|</span><span class="mi">1</span><span class="o">|</span><span class="mi">2</span><span class="o">|</span><span class="mi">3</span><span class="o">|</span>       <span class="o">|</span><span class="n">K</span><span class="o">|</span>             <span class="o">|</span>                               <span class="o">|</span>
</span></span><span class="line"><span class="cl"> <span class="o">+-+-+-+-+-------+-+-------------+</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl"> <span class="o">|</span>     <span class="n">Extended</span> <span class="n">payload</span> <span class="n">length</span> <span class="n">continued</span><span class="p">,</span> <span class="k">if</span> <span class="n">payload</span> <span class="n">len</span> <span class="o">==</span> <span class="mi">127</span>  <span class="o">|</span>
</span></span><span class="line"><span class="cl"> <span class="o">+</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">+-------------------------------+</span>
</span></span><span class="line"><span class="cl"> <span class="o">|</span>                               <span class="o">|</span><span class="n">Masking</span><span class="o">-</span><span class="n">key</span><span class="p">,</span> <span class="k">if</span> <span class="n">MASK</span> <span class="n">set</span> <span class="n">to</span> <span class="mi">1</span>  <span class="o">|</span>
</span></span><span class="line"><span class="cl"> <span class="o">+-------------------------------+-------------------------------+</span>
</span></span><span class="line"><span class="cl"> <span class="o">|</span> <span class="n">Masking</span><span class="o">-</span><span class="n">key</span> <span class="p">(</span><span class="n">continued</span><span class="p">)</span>       <span class="o">|</span>          <span class="n">Payload</span> <span class="n">Data</span>         <span class="o">|</span>
</span></span><span class="line"><span class="cl"> <span class="o">+--------------------------------</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl"> <span class="p">:</span>                     <span class="n">Payload</span> <span class="n">Data</span> <span class="n">continued</span> <span class="o">...</span>                <span class="p">:</span>
</span></span><span class="line"><span class="cl"> <span class="o">+</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl"> <span class="o">|</span>                     <span class="n">Payload</span> <span class="n">Data</span> <span class="n">continued</span> <span class="o">...</span>                <span class="o">|</span>
</span></span><span class="line"><span class="cl"> <span class="o">+---------------------------------------------------------------+</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="字段说明-1">字段说明</h3>
<p>FIN：1个比特。
如果是1，表示这是消息（message）的最后一个分片（fragment），如果是0，表示不是是消息（message）的最后一个分片（fragment）。</p>
<p>RSV1, RSV2, RSV3：各占1个比特。
一般情况下全为0。当客户端、服务端协商采用WebSocket扩展时，这三个标志位可以非0，且值的含义由扩展进行定义。如果出现非零的值，且并没有采用WebSocket扩展，连接出错。</p>
<p>Opcode: 4个比特。
操作代码，Opcode的值决定了应该如何解析后续的数据载荷（data payload）。如果操作代码是不认识的，那么接收端应该断开连接（fail the connection）。可选的操作代码如下：</p>
<ul>
<li>%x0：表示一个延续帧。当Opcode为0时，表示本次数据传输采用了数据分片，当前收到的数据帧为其中一个数据分片。</li>
<li>%x1：表示这是一个文本帧（frame）</li>
<li>%x2：表示这是一个二进制帧（frame）</li>
<li>%x3-7：保留的操作代码，用于后续定义的非控制帧。</li>
<li>%x8：表示连接断开。</li>
<li>%x9：表示这是一个ping操作。</li>
<li>%xA：表示这是一个pong操作。</li>
<li>%xB-F：保留的操作代码，用于后续定义的控制帧。</li>
</ul>
<p>Mask: 1个比特。
表示是否要对数据载荷进行掩码操作。从客户端向服务端发送数据时，需要对数据进行掩码操作；从服务端向客户端发送数据时，不需要对数据进行掩码操作。
如果服务端接收到的数据没有进行过掩码操作，服务端需要断开连接。
如果Mask是1，那么在Masking-key中会定义一个掩码键（masking key），并用这个掩码键来对数据载荷进行反掩码。所有客户端发送到服务端的数据帧，Mask都是1。
掩码的算法、用途在下一小节讲解。</p>
<p>Payload length：数据载荷的长度，单位是字节。为7位，或7+16位，或1+64位。
假设数Payload length === x，如果</p>
<ul>
<li>x为0~126：数据的长度为x字节。</li>
<li>x为126：后续2个字节代表一个16位的无符号整数，该无符号整数的值为数据的长度。</li>
<li>x为127：后续8个字节代表一个64位的无符号整数（最高位为0），该无符号整数的值为数据的长度。</li>
</ul>
<p>此外，如果payload length占用了多个字节的话，payload length的二进制表达采用网络序（big endian，重要的位在前）。</p>
<p>Masking-key：0或4字节（32位）
所有从客户端传送到服务端的数据帧，数据载荷都进行了掩码操作，Mask为1，且携带了4字节的Masking-key。如果Mask为0，则没有Masking-key。
备注：载荷数据的长度，不包括mask key的长度。</p>
<p>Payload data：(x+y) 字节</p>
<ul>
<li>载荷数据：包括了扩展数据、应用数据。其中，扩展数据x字节，应用数据y字节。</li>
<li>扩展数据：如果没有协商使用扩展的话，扩展数据数据为0字节。所有的扩展都必须声明扩展数据的长度，或者可以如何计算出扩展数据的长度。此外，扩展如何使用必须在握手阶段就协商好。如果扩展数据存在，那么载荷数据长度必须将扩展数据的长度包含在内。</li>
<li>应用数据：任意的应用数据，在扩展数据之后（如果存在扩展数据），占据了数据帧剩余的位置。载荷数据长度 减去 扩展数据长度，就得到应用数据的长度。</li>
</ul>
<h3 id="掩码算法">掩码算法</h3>
<p>掩码键（Masking-key）是由客户端挑选出来的32位的随机数。掩码操作不会影响数据载荷的长度。掩码、反掩码操作都采用如下算法：</p>
<p>首先，预设：</p>
<ul>
<li>original-octet-i：为原始数据的第i字节。</li>
<li>transformed-octet-i：为转换后的数据的第i字节。</li>
<li>j：为i mod 4的结果。</li>
<li>masking-key-octet-j：为mask key第j字节。</li>
</ul>
<p>流程为： original-octet-i 与 masking-key-octet-j 异或后，得到 transformed-octet-i。</p>
<p>伪代码大概是：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">var</span> <span class="n">DECODED</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ENCODED</span><span class="o">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DECODED</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ENCODED</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">MASK</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>数据掩码的作用：
WebSocket 协议中，数据掩码的作用是增强协议的安全性。但数据掩码并不是为了保护数据本身，因为算法本身是公开的，运算也不复杂。除了加密通道本身，似乎没有太多有效的保护通信安全的办法。
那么为什么还要引入掩码计算呢，除了增加计算机器的运算量外似乎并没有太多的收益（这也是不少同学疑惑的点）。
答案还是两个字：安全。但并不是为了防止数据泄密，而是为了防止早期版本的协议中存在的代理缓存污染攻击（proxy cache poisoning attacks）等问题。</p>
<h2 id="数据传递">数据传递</h2>
<p>一旦WebSocket客户端、服务端建立连接后，后续的操作都是基于数据帧的传递。
WebSocket根据opcode来区分操作的类型。比如0x8表示断开连接，0x0-0x2表示数据交互。</p>
<h3 id="数据分片">数据分片</h3>
<p>WebSocket的每条消息可能被切分成多个数据帧。当WebSocket的接收方收到一个数据帧时，会根据FIN的值来判断，是否已经收到消息的最后一个数据帧。
FIN=1表示当前数据帧为消息的最后一个数据帧，此时接收方已经收到完整的消息，可以对消息进行处理。FIN=0，则接收方还需要继续监听接收其余的数据帧。
此外，opcode在数据交换的场景下，表示的是数据的类型。0x01表示文本，0x02表示二进制。而0x00比较特殊，表示延续帧（continuation frame），顾名思义，就是完整消息对应的数据帧还没接收完。</p>
<h3 id="数据分片例子">数据分片例子</h3>
<p>下面例子来自MDN，可以很好地演示数据的分片。客户端向服务端两次发送消息，服务端收到消息后回应客户端，这里主要看客户端往服务端发送的消息。</p>
<p><em>第一条消息</em></p>
<p>FIN=1, 表示是当前消息的最后一个数据帧。服务端收到当前数据帧后，可以处理消息。opcode=0x1，表示客户端发送的是文本类型。</p>
<p><em>第二条消息</em></p>
<ol>
<li>FIN=0，opcode=0x1，表示发送的是文本类型，且消息还没发送完成，还有后续的数据帧。</li>
<li>FIN=0，opcode=0x0，表示消息还没发送完成，还有后续的数据帧，当前的数据帧需要接在上一条数据帧之后。</li>
<li>FIN=1，opcode=0x0，表示消息已经发送完成，没有后续的数据帧，当前的数据帧需要接在上一条数据帧之后。服务端可以将关联的数据帧组装成完整的消息。</li>
</ol>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">Client</span><span class="p">:</span> <span class="n">FIN</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">opcode</span><span class="o">=</span><span class="mh">0x1</span><span class="p">,</span> <span class="n">msg</span><span class="o">=</span><span class="s2">&#34;hello&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">Server</span><span class="p">:</span> <span class="p">(</span><span class="n">process</span> <span class="n">complete</span> <span class="n">message</span> <span class="n">immediately</span><span class="p">)</span> <span class="n">Hi</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="n">Client</span><span class="p">:</span> <span class="n">FIN</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">opcode</span><span class="o">=</span><span class="mh">0x1</span><span class="p">,</span> <span class="n">msg</span><span class="o">=</span><span class="s2">&#34;and a&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">Server</span><span class="p">:</span> <span class="p">(</span><span class="n">listening</span><span class="p">,</span> <span class="n">new</span> <span class="n">message</span> <span class="n">containing</span> <span class="n">text</span> <span class="n">started</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Client</span><span class="p">:</span> <span class="n">FIN</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">opcode</span><span class="o">=</span><span class="mh">0x0</span><span class="p">,</span> <span class="n">msg</span><span class="o">=</span><span class="s2">&#34;happy new&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">Server</span><span class="p">:</span> <span class="p">(</span><span class="n">listening</span><span class="p">,</span> <span class="n">payload</span> <span class="n">concatenated</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Client</span><span class="p">:</span> <span class="n">FIN</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">opcode</span><span class="o">=</span><span class="mh">0x0</span><span class="p">,</span> <span class="n">msg</span><span class="o">=</span><span class="s2">&#34;year!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">Server</span><span class="p">:</span> <span class="p">(</span><span class="n">process</span> <span class="n">complete</span> <span class="n">message</span><span class="p">)</span> <span class="n">Happy</span> <span class="n">new</span> <span class="n">year</span> <span class="n">to</span> <span class="n">you</span> <span class="n">too</span><span class="o">!</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="心跳">心跳</h2>
<p>WebSocket 为了保持客户端、服务端的实时双向通信，需要确保客户端、服务端之间的 TCP 通道保持连接没有断开。
对于长时间没有数据往来的连接，如果依旧长时间保持着，可能会浪费包括的连接资源。但不排除有些场景，客户端、服务端虽然长时间没有数据往来，但仍需要保持连接。这个时候，可以采用心跳来实现。</p>
<ul>
<li>发送方 -&gt; 接收方：ping</li>
<li>接收方 -&gt; 发送方：pong</li>
</ul>
<p>ping、pong 的操作，对应的是 WebSocket 的两个控制帧，opcode分别是0x9、0xA。</p>
<h2 id="安全性">安全性</h2>
<p>WebSocket协议中规定在连接建立时检查Upgrade请求中的某些字段（如Origin，查看每次请求是否一致），对于不符合要求的请求立即断开，在通信过程中，也对Frame中的控制位做了很多限制，以便禁止异常连接。
websocket协议中也规定了数据加密传输的方式，允许使用TLS/SSL来对通信加密，默认ws的端口为80，wss端口为433，类似HTTP与HTTPS。</p>
<h2 id="go实战gorilla-websocket">Go实战：Gorilla WebSocket</h2>
<blockquote>
<p>Github：https://github.com/gorilla/websocket</p>
</blockquote>
<p>文件监控例子（当文件被修改后，把文件发给客户端）：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">http</span><span class="o">.</span><span class="n">HandleFunc</span><span class="p">(</span><span class="s2">&#34;/ws&#34;</span><span class="p">,</span> <span class="n">serveWs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="n">nil</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nb">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="n">serveWs</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="o">//</span><span class="err">升级为</span><span class="n">Websocket协议</span>
</span></span><span class="line"><span class="cl">   <span class="n">ws</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">upgrader</span><span class="o">.</span><span class="n">Upgrade</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">ok</span> <span class="p">:</span><span class="o">=</span> <span class="n">err</span><span class="o">.</span><span class="p">(</span><span class="n">websocket</span><span class="o">.</span><span class="n">HandshakeError</span><span class="p">);</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nb">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">var</span> <span class="n">lastMod</span> <span class="n">time</span><span class="o">.</span><span class="n">Time</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">n</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">ParseInt</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s2">&#34;lastMod&#34;</span><span class="p">),</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">64</span><span class="p">);</span> <span class="n">err</span> <span class="o">==</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">lastMod</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">Unix</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">go</span> <span class="n">writer</span><span class="p">(</span><span class="n">ws</span><span class="p">,</span> <span class="n">lastMod</span><span class="p">)</span> <span class="o">//</span><span class="err">发送数据、</span><span class="n">Pong</span>
</span></span><span class="line"><span class="cl">   <span class="n">reader</span><span class="p">(</span><span class="n">ws</span><span class="p">)</span> <span class="o">//</span><span class="err">读数据、处理</span><span class="n">Ping</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="n">writer</span><span class="p">(</span><span class="n">ws</span> <span class="o">*</span><span class="n">websocket</span><span class="o">.</span><span class="n">Conn</span><span class="p">,</span> <span class="n">lastMod</span> <span class="n">time</span><span class="o">.</span><span class="n">Time</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">pingTicker</span> <span class="p">:</span><span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">NewTicker</span><span class="p">(</span><span class="n">pingPeriod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">fileTicker</span> <span class="p">:</span><span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">NewTicker</span><span class="p">(</span><span class="n">filePeriod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="o">&lt;-</span><span class="n">fileTicker</span><span class="o">.</span><span class="n">C</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="n">p</span><span class="p">,</span> <span class="n">fileModified</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">readFileIfModified</span><span class="p">(</span><span class="n">lastMod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">...</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="n">fileModified</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ws</span><span class="o">.</span><span class="n">SetWriteDeadline</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">writeWait</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">ws</span><span class="o">.</span><span class="n">WriteMessage</span><span class="p">(</span><span class="n">websocket</span><span class="o">.</span><span class="n">TextMessage</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">               <span class="k">return</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="o">&lt;-</span><span class="n">pingTicker</span><span class="o">.</span><span class="n">C</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="n">ws</span><span class="o">.</span><span class="n">SetWriteDeadline</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">writeWait</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">ws</span><span class="o">.</span><span class="n">WriteMessage</span><span class="p">(</span><span class="n">websocket</span><span class="o">.</span><span class="n">PingMessage</span><span class="p">,</span> <span class="p">[]</span><span class="n">byte</span><span class="p">{});</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="n">reader</span><span class="p">(</span><span class="n">ws</span> <span class="o">*</span><span class="n">websocket</span><span class="o">.</span><span class="n">Conn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">defer</span> <span class="n">ws</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="n">ws</span><span class="o">.</span><span class="n">SetReadLimit</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">ws</span><span class="o">.</span><span class="n">SetReadDeadline</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">pongWait</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="n">ws</span><span class="o">.</span><span class="n">SetPongHandler</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="n">error</span> <span class="p">{</span> <span class="n">ws</span><span class="o">.</span><span class="n">SetReadDeadline</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">pongWait</span><span class="p">));</span> <span class="k">return</span> <span class="n">nil</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">ws</span><span class="o">.</span><span class="n">ReadMessage</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">break</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中最重要的几个方法是Upgrade、ReadMessage和WriteMessage，下面逐一介绍。</p>
<h3 id="upgrade">Upgrade</h3>
<p>协议升级</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="o">//</span> <span class="n">Upgrade</span> <span class="n">upgrades</span> <span class="n">the</span> <span class="n">HTTP</span> <span class="n">server</span> <span class="n">connection</span> <span class="n">to</span> <span class="n">the</span> <span class="n">WebSocket</span> <span class="n">protocol</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">u</span> <span class="o">*</span><span class="n">Upgrader</span><span class="p">)</span> <span class="n">Upgrade</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">responseHeader</span> <span class="n">http</span><span class="o">.</span><span class="n">Header</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">Conn</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">const</span> <span class="n">badHandshake</span> <span class="o">=</span> <span class="s2">&#34;websocket: the client is not using the websocket protocol: &#34;</span>
</span></span><span class="line"><span class="cl">   <span class="o">//</span><span class="err">检查必要的头部字段</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">!</span><span class="n">tokenListContainsValue</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">Header</span><span class="p">,</span> <span class="s2">&#34;Connection&#34;</span><span class="p">,</span> <span class="s2">&#34;upgrade&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="n">returnError</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="n">badHandshake</span><span class="o">+</span><span class="s2">&#34;&#39;upgrade&#39; token not found in &#39;Connection&#39; header&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">!</span><span class="n">tokenListContainsValue</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">Header</span><span class="p">,</span> <span class="s2">&#34;Upgrade&#34;</span><span class="p">,</span> <span class="s2">&#34;websocket&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="n">returnError</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="n">badHandshake</span><span class="o">+</span><span class="s2">&#34;&#39;websocket&#39; token not found in &#39;Upgrade&#39; header&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">Method</span> <span class="o">!=</span> <span class="s2">&#34;GET&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="n">returnError</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusMethodNotAllowed</span><span class="p">,</span> <span class="n">badHandshake</span><span class="o">+</span><span class="s2">&#34;request method is not GET&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">!</span><span class="n">tokenListContainsValue</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">Header</span><span class="p">,</span> <span class="s2">&#34;Sec-Websocket-Version&#34;</span><span class="p">,</span> <span class="s2">&#34;13&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="n">returnError</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="s2">&#34;websocket: unsupported version: 13 not found in &#39;Sec-Websocket-Version&#39; header&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">!</span><span class="n">checkOrigin</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="n">returnError</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusForbidden</span><span class="p">,</span> <span class="s2">&#34;websocket: request origin not allowed by Upgrader.CheckOrigin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">challengeKey</span> <span class="p">:</span><span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="s2">&#34;Sec-Websocket-Key&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">challengeKey</span> <span class="o">==</span> <span class="s2">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="n">returnError</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="s2">&#34;websocket: not a websocket handshake: &#39;Sec-WebSocket-Key&#39; header is missing or blank&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">h</span><span class="p">,</span> <span class="n">ok</span> <span class="p">:</span><span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">Hijacker</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="n">returnError</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusInternalServerError</span><span class="p">,</span> <span class="s2">&#34;websocket: response does not implement http.Hijacker&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="o">//</span><span class="err">创建</span><span class="n">websocket</span><span class="o">.</span><span class="n">Conn</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span> <span class="p">:</span><span class="o">=</span> <span class="n">newConn</span><span class="p">(</span><span class="n">netConn</span><span class="p">,</span> <span class="bp">true</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">ReadBufferSize</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">WriteBufferSize</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">WriteBufferPool</span><span class="p">,</span> <span class="n">br</span><span class="p">,</span> <span class="n">writeBuf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">   <span class="k">var</span> <span class="n">p</span> <span class="p">[]</span><span class="n">byte</span>
</span></span><span class="line"><span class="cl">   <span class="n">p</span> <span class="o">=</span> <span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s2">&#34;HTTP/1.1 101 Switching Protocols</span><span class="se">\r\n</span><span class="s2">Upgrade: websocket</span><span class="se">\r\n</span><span class="s2">Connection: Upgrade</span><span class="se">\r\n</span><span class="s2">Sec-WebSocket-Accept: &#34;</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">p</span> <span class="o">=</span> <span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">computeAcceptKey</span><span class="p">(</span><span class="n">challengeKey</span><span class="p">)</span><span class="o">...</span><span class="p">)</span> <span class="o">//</span><span class="err">计算</span><span class="n">accept</span>
</span></span><span class="line"><span class="cl">   <span class="n">p</span> <span class="o">=</span> <span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">subprotocol</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span> <span class="o">=</span> <span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s2">&#34;Sec-WebSocket-Protocol: &#34;</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span> <span class="o">=</span> <span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">subprotocol</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span> <span class="o">=</span> <span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">netConn</span><span class="o">.</span><span class="n">Write</span><span class="p">(</span><span class="n">p</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">netConn</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">nil</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">c</span><span class="p">,</span> <span class="n">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">var</span> <span class="n">keyGUID</span> <span class="o">=</span> <span class="p">[]</span><span class="n">byte</span><span class="p">(</span><span class="s2">&#34;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="n">computeAcceptKey</span><span class="p">(</span><span class="n">challengeKey</span> <span class="n">string</span><span class="p">)</span> <span class="n">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">h</span> <span class="p">:</span><span class="o">=</span> <span class="n">sha1</span><span class="o">.</span><span class="n">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="n">h</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="n">byte</span><span class="p">(</span><span class="n">challengeKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="n">h</span><span class="o">.</span><span class="n">Write</span><span class="p">(</span><span class="n">keyGUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">base64</span><span class="o">.</span><span class="n">StdEncoding</span><span class="o">.</span><span class="n">EncodeToString</span><span class="p">(</span><span class="n">h</span><span class="o">.</span><span class="n">Sum</span><span class="p">(</span><span class="n">nil</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="n">newConn</span><span class="p">(</span><span class="n">conn</span> <span class="n">net</span><span class="o">.</span><span class="n">Conn</span><span class="p">,</span> <span class="n">isServer</span> <span class="ne">bool</span><span class="p">,</span> <span class="n">readBufferSize</span><span class="p">,</span> <span class="n">writeBufferSize</span> <span class="ne">int</span><span class="p">,</span> <span class="n">writeBufferPool</span> <span class="n">BufferPool</span><span class="p">,</span> <span class="n">br</span> <span class="o">*</span><span class="n">bufio</span><span class="o">.</span><span class="n">Reader</span><span class="p">,</span> <span class="n">writeBuf</span> <span class="p">[]</span><span class="n">byte</span><span class="p">)</span> <span class="o">*</span><span class="n">Conn</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span> <span class="p">:</span><span class="o">=</span> <span class="o">&amp;</span><span class="n">Conn</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">isServer</span><span class="p">:</span>               <span class="n">isServer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">br</span><span class="p">:</span>                     <span class="n">br</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">conn</span><span class="p">:</span>                   <span class="n">conn</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">mu</span><span class="p">:</span>                     <span class="n">mu</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">readFinal</span><span class="p">:</span>              <span class="bp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">writeBuf</span><span class="p">:</span>               <span class="n">writeBuf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">writePool</span><span class="p">:</span>              <span class="n">writeBufferPool</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">writeBufSize</span><span class="p">:</span>           <span class="n">writeBufferSize</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">enableWriteCompression</span><span class="p">:</span> <span class="bp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">compressionLevel</span><span class="p">:</span>       <span class="n">defaultCompressionLevel</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="o">//</span><span class="err">设置对应的消息处理</span><span class="n">Handler</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span><span class="o">.</span><span class="n">SetCloseHandler</span><span class="p">(</span><span class="n">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span><span class="o">.</span><span class="n">SetPingHandler</span><span class="p">(</span><span class="n">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span><span class="o">.</span><span class="n">SetPongHandler</span><span class="p">(</span><span class="n">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">c</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Conn</span><span class="p">)</span> <span class="n">SetCloseHandler</span><span class="p">(</span><span class="n">h</span> <span class="k">func</span><span class="p">(</span><span class="n">code</span> <span class="ne">int</span><span class="p">,</span> <span class="n">text</span> <span class="n">string</span><span class="p">)</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">h</span> <span class="o">==</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">h</span> <span class="o">=</span> <span class="k">func</span><span class="p">(</span><span class="n">code</span> <span class="ne">int</span><span class="p">,</span> <span class="n">text</span> <span class="n">string</span><span class="p">)</span> <span class="n">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">message</span> <span class="p">:</span><span class="o">=</span> <span class="n">FormatCloseMessage</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="n">c</span><span class="o">.</span><span class="n">WriteControl</span><span class="p">(</span><span class="n">CloseMessage</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">writeWait</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">nil</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span><span class="o">.</span><span class="n">handleClose</span> <span class="o">=</span> <span class="n">h</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Conn</span><span class="p">)</span> <span class="n">SetPingHandler</span><span class="p">(</span><span class="n">h</span> <span class="k">func</span><span class="p">(</span><span class="n">appData</span> <span class="n">string</span><span class="p">)</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">h</span> <span class="o">==</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">h</span> <span class="o">=</span> <span class="k">func</span><span class="p">(</span><span class="n">message</span> <span class="n">string</span><span class="p">)</span> <span class="n">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">WriteControl</span><span class="p">(</span><span class="n">PongMessage</span><span class="p">,</span> <span class="p">[]</span><span class="n">byte</span><span class="p">(</span><span class="n">message</span><span class="p">),</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">writeWait</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span><span class="o">.</span><span class="n">handlePing</span> <span class="o">=</span> <span class="n">h</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Conn</span><span class="p">)</span> <span class="n">SetPongHandler</span><span class="p">(</span><span class="n">h</span> <span class="k">func</span><span class="p">(</span><span class="n">appData</span> <span class="n">string</span><span class="p">)</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">h</span> <span class="o">==</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">h</span> <span class="o">=</span> <span class="k">func</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="n">error</span> <span class="p">{</span> <span class="k">return</span> <span class="n">nil</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span><span class="o">.</span><span class="n">handlePong</span> <span class="o">=</span> <span class="n">h</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="readmessage">ReadMessage</h3>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Conn</span><span class="p">)</span> <span class="n">ReadMessage</span><span class="p">()</span> <span class="p">(</span><span class="n">messageType</span> <span class="ne">int</span><span class="p">,</span> <span class="n">p</span> <span class="p">[]</span><span class="n">byte</span><span class="p">,</span> <span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">var</span> <span class="n">r</span> <span class="n">io</span><span class="o">.</span><span class="n">Reader</span>
</span></span><span class="line"><span class="cl">   <span class="n">messageType</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">NextReader</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">messageType</span><span class="p">,</span> <span class="n">nil</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">ReadAll</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">messageType</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Conn</span><span class="p">)</span> <span class="n">NextReader</span><span class="p">()</span> <span class="p">(</span><span class="n">messageType</span> <span class="ne">int</span><span class="p">,</span> <span class="n">r</span> <span class="n">io</span><span class="o">.</span><span class="n">Reader</span><span class="p">,</span> <span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="n">c</span><span class="o">.</span><span class="n">readErr</span> <span class="o">==</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="n">frameType</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">advanceFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">c</span><span class="o">.</span><span class="n">readErr</span> <span class="o">=</span> <span class="n">hideTempErr</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">break</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">       <span class="k">if</span> <span class="n">frameType</span> <span class="o">==</span> <span class="n">TextMessage</span> <span class="o">||</span> <span class="n">frameType</span> <span class="o">==</span> <span class="n">BinaryMessage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">c</span><span class="o">.</span><span class="n">messageReader</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">messageReader</span><span class="p">{</span><span class="n">c</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="n">c</span><span class="o">.</span><span class="n">reader</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">messageReader</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">readDecompress</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">             <span class="n">c</span><span class="o">.</span><span class="n">reader</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">newDecompressionReader</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">reader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">frameType</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">reader</span><span class="p">,</span> <span class="n">nil</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">//</span><span class="err">解析数据帧</span>
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Conn</span><span class="p">)</span> <span class="n">advanceFrame</span><span class="p">()</span> <span class="p">(</span><span class="ne">int</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">final</span> <span class="p">:</span><span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;</span><span class="n">finalBit</span> <span class="o">!=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">   <span class="n">frameType</span> <span class="p">:</span><span class="o">=</span> <span class="ne">int</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">mask</span> <span class="p">:</span><span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;</span><span class="n">maskBit</span> <span class="o">!=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span><span class="o">.</span><span class="n">setReadRemaining</span><span class="p">(</span><span class="n">int64</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x7f</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">switch</span> <span class="n">frameType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="n">CloseMessage</span><span class="p">,</span> <span class="n">PingMessage</span><span class="p">,</span> <span class="n">PongMessage</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">readRemaining</span> <span class="o">&gt;</span> <span class="n">maxControlFramePayloadSize</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">handleProtocolError</span><span class="p">(</span><span class="s2">&#34;control frame length &gt; 125&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">!</span><span class="n">final</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">handleProtocolError</span><span class="p">(</span><span class="s2">&#34;control frame not final&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="n">TextMessage</span><span class="p">,</span> <span class="n">BinaryMessage</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">!</span><span class="n">c</span><span class="o">.</span><span class="n">readFinal</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">handleProtocolError</span><span class="p">(</span><span class="s2">&#34;message start before final message frame&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">readFinal</span> <span class="o">=</span> <span class="n">final</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="n">continuationFrame</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">readFinal</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">handleProtocolError</span><span class="p">(</span><span class="s2">&#34;continuation after final message frame&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">readFinal</span> <span class="o">=</span> <span class="n">final</span>
</span></span><span class="line"><span class="cl">   <span class="n">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">handleProtocolError</span><span class="p">(</span><span class="s2">&#34;unknown opcode &#34;</span> <span class="o">+</span> <span class="n">strconv</span><span class="o">.</span><span class="n">Itoa</span><span class="p">(</span><span class="n">frameType</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="k">switch</span> <span class="n">c</span><span class="o">.</span><span class="n">readRemaining</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="mi">126</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">setReadRemaining</span><span class="p">(</span><span class="n">int64</span><span class="p">(</span><span class="n">binary</span><span class="o">.</span><span class="n">BigEndian</span><span class="o">.</span><span class="n">Uint16</span><span class="p">(</span><span class="n">p</span><span class="p">)));</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="mi">127</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">setReadRemaining</span><span class="p">(</span><span class="n">int64</span><span class="p">(</span><span class="n">binary</span><span class="o">.</span><span class="n">BigEndian</span><span class="o">.</span><span class="n">Uint64</span><span class="p">(</span><span class="n">p</span><span class="p">)));</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">mask</span> <span class="o">!=</span> <span class="n">c</span><span class="o">.</span><span class="n">isServer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">handleProtocolError</span><span class="p">(</span><span class="s2">&#34;incorrect mask flag&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">mask</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">readMaskPos</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">      <span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">readMaskKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">copy</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">readMaskKey</span><span class="p">[:],</span> <span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="o">//</span><span class="err">处理控制帧</span>
</span></span><span class="line"><span class="cl">   <span class="k">switch</span> <span class="n">frameType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="n">PongMessage</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">handlePong</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">payload</span><span class="p">));</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="n">PingMessage</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">handlePing</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">payload</span><span class="p">));</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="n">CloseMessage</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">closeCode</span> <span class="p">:</span><span class="o">=</span> <span class="n">CloseNoStatusReceived</span>
</span></span><span class="line"><span class="cl">      <span class="n">closeText</span> <span class="p">:</span><span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">len</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">closeCode</span> <span class="o">=</span> <span class="ne">int</span><span class="p">(</span><span class="n">binary</span><span class="o">.</span><span class="n">BigEndian</span><span class="o">.</span><span class="n">Uint16</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="o">!</span><span class="n">isValidReceivedCloseCode</span><span class="p">(</span><span class="n">closeCode</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">handleProtocolError</span><span class="p">(</span><span class="s2">&#34;invalid close code&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="n">closeText</span> <span class="o">=</span> <span class="n">string</span><span class="p">(</span><span class="n">payload</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="o">!</span><span class="n">utf8</span><span class="o">.</span><span class="n">ValidString</span><span class="p">(</span><span class="n">closeText</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">handleProtocolError</span><span class="p">(</span><span class="s2">&#34;invalid utf8 payload in close frame&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">handleClose</span><span class="p">(</span><span class="n">closeCode</span><span class="p">,</span> <span class="n">closeText</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">noFrame</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">CloseError</span><span class="p">{</span><span class="n">Code</span><span class="p">:</span> <span class="n">closeCode</span><span class="p">,</span> <span class="n">Text</span><span class="p">:</span> <span class="n">closeText</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">frameType</span><span class="p">,</span> <span class="n">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="writemessage">WriteMessage</h3>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Conn</span><span class="p">)</span> <span class="n">WriteMessage</span><span class="p">(</span><span class="n">messageType</span> <span class="ne">int</span><span class="p">,</span> <span class="n">data</span> <span class="p">[]</span><span class="n">byte</span><span class="p">)</span> <span class="n">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">var</span> <span class="n">mw</span> <span class="n">messageWriter</span>
</span></span><span class="line"><span class="cl">   <span class="o">//</span> <span class="n">beginMessage</span> <span class="n">prepares</span> <span class="n">a</span> <span class="n">connection</span> <span class="ow">and</span> <span class="n">message</span> <span class="n">writer</span> <span class="k">for</span> <span class="n">a</span> <span class="n">new</span> <span class="n">message</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">beginMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mw</span><span class="p">,</span> <span class="n">messageType</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="p">:</span><span class="o">=</span> <span class="n">copy</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">mw</span><span class="o">.</span><span class="n">pos</span><span class="p">:],</span> <span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">mw</span><span class="o">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">n</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mw</span><span class="o">.</span><span class="n">flushFrame</span><span class="p">(</span><span class="bp">true</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">//</span><span class="err">组装数据帧</span>
</span></span><span class="line"><span class="cl"><span class="k">func</span> <span class="p">(</span><span class="n">w</span> <span class="o">*</span><span class="n">messageWriter</span><span class="p">)</span> <span class="n">flushFrame</span><span class="p">(</span><span class="n">final</span> <span class="ne">bool</span><span class="p">,</span> <span class="n">extra</span> <span class="p">[]</span><span class="n">byte</span><span class="p">)</span> <span class="n">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span> <span class="p">:</span><span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">c</span>
</span></span><span class="line"><span class="cl">   <span class="n">length</span> <span class="p">:</span><span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">maxFrameHeaderSize</span> <span class="o">+</span> <span class="n">len</span><span class="p">(</span><span class="n">extra</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">b0</span> <span class="p">:</span><span class="o">=</span> <span class="n">byte</span><span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">frameType</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">final</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">b0</span> <span class="o">|=</span> <span class="n">finalBit</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">w</span><span class="o">.</span><span class="n">compress</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">b0</span> <span class="o">|=</span> <span class="n">rsv1Bit</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">w</span><span class="o">.</span><span class="n">compress</span> <span class="o">=</span> <span class="bp">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">b1</span> <span class="p">:</span><span class="o">=</span> <span class="n">byte</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">!</span><span class="n">c</span><span class="o">.</span><span class="n">isServer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">b1</span> <span class="o">|=</span> <span class="n">maskBit</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="o">//</span> <span class="n">Assume</span> <span class="n">that</span> <span class="n">the</span> <span class="n">frame</span> <span class="n">starts</span> <span class="n">at</span> <span class="n">beginning</span> <span class="n">of</span> <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">   <span class="n">framePos</span> <span class="p">:</span><span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">isServer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="o">//</span> <span class="n">Adjust</span> <span class="n">up</span> <span class="k">if</span> <span class="n">mask</span> <span class="ow">not</span> <span class="n">included</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">header</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">      <span class="n">framePos</span> <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">65536</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="p">]</span> <span class="o">=</span> <span class="n">b0</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">b1</span> <span class="o">|</span> <span class="mi">127</span>
</span></span><span class="line"><span class="cl">      <span class="n">binary</span><span class="o">.</span><span class="n">BigEndian</span><span class="o">.</span><span class="n">PutUint64</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="o">+</span><span class="mi">2</span><span class="p">:],</span> <span class="n">uint64</span><span class="p">(</span><span class="n">length</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="k">case</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="mi">125</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">framePos</span> <span class="o">+=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="p">]</span> <span class="o">=</span> <span class="n">b0</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">b1</span> <span class="o">|</span> <span class="mi">126</span>
</span></span><span class="line"><span class="cl">      <span class="n">binary</span><span class="o">.</span><span class="n">BigEndian</span><span class="o">.</span><span class="n">PutUint16</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="o">+</span><span class="mi">2</span><span class="p">:],</span> <span class="n">uint16</span><span class="p">(</span><span class="n">length</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="n">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">framePos</span> <span class="o">+=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="p">]</span> <span class="o">=</span> <span class="n">b0</span>
</span></span><span class="line"><span class="cl">      <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">b1</span> <span class="o">|</span> <span class="n">byte</span><span class="p">(</span><span class="n">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">!</span><span class="n">c</span><span class="o">.</span><span class="n">isServer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">key</span> <span class="p">:</span><span class="o">=</span> <span class="n">newMaskKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">copy</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">maxFrameHeaderSize</span><span class="o">-</span><span class="mi">4</span><span class="p">:],</span> <span class="n">key</span><span class="p">[:])</span>
</span></span><span class="line"><span class="cl">      <span class="n">maskBytes</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">maxFrameHeaderSize</span><span class="p">:</span><span class="n">w</span><span class="o">.</span><span class="n">pos</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">len</span><span class="p">(</span><span class="n">extra</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">w</span><span class="o">.</span><span class="n">endMessage</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">writeFatal</span><span class="p">(</span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s2">&#34;websocket: internal error, extra used in client mode&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="o">//</span> <span class="n">Write</span> <span class="n">the</span> <span class="n">buffers</span> <span class="n">to</span> <span class="n">the</span> <span class="n">connection</span> <span class="n">with</span> <span class="n">best</span><span class="o">-</span><span class="n">effort</span> <span class="n">detection</span> <span class="n">of</span>
</span></span><span class="line"><span class="cl">   <span class="o">//</span> <span class="n">concurrent</span> <span class="n">writes</span><span class="o">.</span> <span class="n">See</span> <span class="n">the</span> <span class="n">concurrency</span> <span class="n">section</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">package</span>
</span></span><span class="line"><span class="cl">   <span class="o">//</span> <span class="n">documentation</span> <span class="k">for</span> <span class="n">more</span> <span class="n">info</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">isWriting</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">panic</span><span class="p">(</span><span class="s2">&#34;concurrent write to websocket connection&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">c</span><span class="o">.</span><span class="n">isWriting</span> <span class="o">=</span> <span class="bp">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">err</span> <span class="p">:</span><span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">frameType</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">writeDeadline</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">writeBuf</span><span class="p">[</span><span class="n">framePos</span><span class="p">:</span><span class="n">w</span><span class="o">.</span><span class="n">pos</span><span class="p">],</span> <span class="n">extra</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="o">...</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Ref：</p>
<ul>
<li><a href="https://datatracker.ietf.org/doc/html/rfc6455#"target="_blank" rel="external nofollow noopener noreferrer">https://datatracker.ietf.org/doc/html/rfc6455#<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://zh.wikipedia.org/wiki/WebSocket"target="_blank" rel="external nofollow noopener noreferrer">https://zh.wikipedia.org/wiki/WebSocket<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html"target="_blank" rel="external nofollow noopener noreferrer">http://www.ruanyifeng.com/blog/2017/05/websocket.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://pkg.go.dev/github.com/gorilla/websocket"target="_blank" rel="external nofollow noopener noreferrer">https://pkg.go.dev/github.com/gorilla/websocket<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item></channel></rss>