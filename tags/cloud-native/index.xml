<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Cloud Native - 标签 - 楚兴 - Chuxing's Blog</title><link>https://xzygis.github.io/tags/cloud-native/</link><description>Cloud Native - 标签 - 楚兴 - Chuxing's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xzygis@163.com (chuxing)</managingEditor><webMaster>xzygis@163.com (chuxing)</webMaster><lastBuildDate>Tue, 28 Jan 2020 15:05:10 +0000</lastBuildDate><atom:link href="https://xzygis.github.io/tags/cloud-native/" rel="self" type="application/rss+xml"/><item><title>云原生概述</title><link>https://xzygis.github.io/posts/introduction-of-cloud-native/</link><pubDate>Tue, 28 Jan 2020 15:05:10 +0000</pubDate><author>chuxing</author><guid>https://xzygis.github.io/posts/introduction-of-cloud-native/</guid><description><![CDATA[<h2 id="云原生的定义">云原生的定义</h2>
<p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。</p>
<p>这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。</p>
<h2 id="云原生的设计哲学">云原生的设计哲学</h2>
<p>云原生本身甚至不能称为是一种架构，它首先是一种基础设施，运行在其上的应用称作云原生应用，只有符合云原生设计哲学的应用架构才叫云原生应用架构。</p>
<h3 id="云原生的设计理念">云原生的设计理念</h3>
<p>云原生系统的设计理念如下:</p>
<ul>
<li>面向分布式设计（Distribution）：容器、微服务、API 驱动的开发；</li>
<li>面向配置设计（Configuration）：一个镜像，多个环境配置；</li>
<li>面向韧性设计（Resistancy）：故障容忍和自愈；</li>
<li>面向弹性设计（Elasticity）：弹性扩展和对环境变化（负载）做出响应；</li>
<li>面向交付设计（Delivery）：自动拉起，缩短交付时间；</li>
<li>面向性能设计（Performance）：响应式，并发和资源高效利用；</li>
<li>面向自动化设计（Automation）：自动化的 DevOps；</li>
<li>面向诊断性设计（Diagnosability）：集群级别的日志、metric 和追踪；</li>
<li>面向安全性设计（Security）：安全端点、API Gateway、端到端加密；</li>
</ul>
<h3 id="云原生应用程序">云原生应用程序</h3>
<p>云原生应用程序被设计为在平台上运行，并设计用于弹性，敏捷性，可操作性和可观察性。弹性包含失败而不是试图阻止它们；它利用了在平台上运行的动态特性。敏捷性允许快速部署和快速迭代。可操作性从应用程序内部控制应用程序生命周期，而不是依赖外部进程和监视器。可观察性提供信息来回答有关应用程序状态的问题。</p>
<p>实现云原生应用程序所需特性的常用方法：</p>
<ul>
<li>微服务</li>
<li>健康报告</li>
<li>遥测数据</li>
<li>弹性</li>
<li>声明式的，而不是命令式的</li>
</ul>
<h4 id="微服务">微服务</h4>
<p>微服务 (Microservices) 是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关 (Language-Independent/Language agnostic) 的 API 集相互通信。</p>
<p>微服务是一种以业务功能为主的服务设计概念，每一个服务都具有自主运行的业务功能，对外开放不受语言限制的 API (最常用的是 HTTP)，应用程序则是由一个或多个微服务组成。</p>
<h4 id="健康报告">健康报告</h4>
<p>为了提高云原生应用程序的可操作性，应用程序应该暴露健康检查。开发人员可以将其实施为命令或过程信号，以便应用程序在执行自我检查之后响应，或者更常见的是：通过应用程序提供Web服务，返回HTTP状态码来检查健康状态。</p>
<p>一个很好的例子就是当平台需要知道应用程序何时可以接收流量。在应用程序启动时，如果它不能正确处理流量，它就应该表现为未准备好。</p>
<h4 id="遥测数据">遥测数据</h4>
<p>遥测数据是进行决策所需的信息。确实，遥测数据可能与健康报告重叠，但它们有不同的用途。健康报告通知我们应用程序生命周期状态，而遥测数据通知我们应用程序业务目标。</p>
<p>测量的指标有时称为服务级指标（SLI）或关键性能指标（KPI）。这些是特定于应用程序的数据，可以确保应用程序的性能处于服务级别目标（SLO）内。</p>
<h4 id="弹性">弹性</h4>
<p>一旦你有遥测和监测数据，你需要确保你的应用程序对故障有适应能力。弹性是基础设施的责任，但云原生应用程序也需要承担部分工作。在云原生应用程序中考虑弹性的两个主要方面：为失败设计和优雅降级。</p>
<h5 id="为失败设计">为失败设计</h5>
<p>设计一个以失败期望为目标的应用程序将比假定可用性的应用程序更具防御性。当故障不可避免时，将会有额外的检查，故障模式和日志内置到应用程序中。</p>
<h5 id="优雅降级">优雅降级</h5>
<p>云原生应用程序处理过载的一种方式。</p>
<h4 id="声明式非命令式">声明式，非命令式</h4>
<p>声明式编程是一种编程范式，与命令式编程相对立。它描述目标的性质，让电脑明白目标，而非流程。声明式编程不用告诉电脑问题领域，从而避免随之而来的副作用。而命令式编程则需要用算法来明确的指出每一步该怎么做。</p>
<p>声明式通信模型规范了通信模型，并且它将功能实现从应用程序转移到远程API或服务端点，从而实现某种状态到达期望状态。这有助于简化应用程序，并使它们彼此的行为更具可预测性。</p>
<p>例子：SQL数据库
其实你很早就接触过声明式编程语言， SQL语言就是很典型的例子：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="k">user</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">user_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Ben</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上面是一个很普通的SQL查询语句，我只只声明我想要找一个叫Ben的用户（What) , 就是不说SQL该怎么（How）去寻找怎么做。接下来我们看看如果用命令式语言写会是什么样的：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">//user=[{user_name:&#39;ou&#39;,user_id=1},.....]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">user</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">user_name</span> <span class="o">==</span> <span class="s2">&#34;Ben&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nx">print</span><span class="p">(</span><span class="s2">&#34;find&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">         <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过上面的对比你可以看出声明式语言的优势-短小精悍，你并不会知道程序的控制流（control flow）我们不需要告诉程序如何去寻找（How），而是只告诉程序我们想要的结果（What），让程序自己来解决过程（How）。当然SQL具体的细节还是用命令式的编程风格来实现的。</p>
<h2 id="play-with-kubernetes">Play with Kubernetes</h2>
<h3 id="创建kubernetes集群">创建Kubernetes集群</h3>
<p>登陆Play with Kubernetes，启动第一个实例作为Master节点，在web终端上执行：</p>
<ol>
<li>初始化master节点：</li>
</ol>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubeadm init --apiserver-advertise-address <span class="k">$(</span>hostname -i<span class="k">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>输出如下：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[node1 ~]$ kubeadm init --apiserver-advertise-address $(hostname -i)
</span></span><span class="line"><span class="cl">Initializing machine ID from random generator.
</span></span><span class="line"><span class="cl">[init] using Kubernetes version: v1.11.10
</span></span><span class="line"><span class="cl">[preflight] running pre-flight checks
</span></span><span class="line"><span class="cl">        [WARNING Service-Docker]: docker service is not active, please run &#39;systemctl start docker.service&#39;
</span></span><span class="line"><span class="cl">        [WARNING FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist
</span></span><span class="line"><span class="cl">I1117 13:53:18.409493     885 kernel_validator.go:81] Validating kernel version
</span></span><span class="line"><span class="cl">I1117 13:53:18.409685     885 kernel_validator.go:96] Validating kernel config
</span></span><span class="line"><span class="cl">[preflight] The system verification failed. Printing the output from the verification:
</span></span><span class="line"><span class="cl">KERNEL_VERSION: 4.4.0-148-generic
</span></span><span class="line"><span class="cl">DOCKER_VERSION: 18.06.1-ce
</span></span><span class="line"><span class="cl">OS: Linux
</span></span><span class="line"><span class="cl">CGROUPS_CPU: enabled
</span></span><span class="line"><span class="cl">CGROUPS_CPUACCT: enabled
</span></span><span class="line"><span class="cl">CGROUPS_CPUSET: enabled
</span></span><span class="line"><span class="cl">CGROUPS_DEVICES: enabled
</span></span><span class="line"><span class="cl">CGROUPS_FREEZER: enabled
</span></span><span class="line"><span class="cl">CGROUPS_MEMORY: enabled
</span></span><span class="line"><span class="cl">        [WARNING SystemVerification]: docker version is greater than the most recently validated version. Docker version: 18.06.1-ce. Max validated version: 17.03
</span></span><span class="line"><span class="cl">        [WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module &#34;configs&#34;: output - &#34;&#34;, err - exit status 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[preflight/images] Pulling images required for setting up a Kubernetes cluster
</span></span><span class="line"><span class="cl">[preflight/images] This might take a minute or two, depending on the speed of your internet connection
</span></span><span class="line"><span class="cl">[preflight/images] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;
</span></span><span class="line"><span class="cl">[kubelet] Writing kubelet environment file with flags to file &#34;/var/lib/kubelet/kubeadm-flags.env&#34;
</span></span><span class="line"><span class="cl">[kubelet] Writing kubelet configuration to file &#34;/var/lib/kubelet/config.yaml&#34;
</span></span><span class="line"><span class="cl">[preflight] Activating the kubelet service
</span></span><span class="line"><span class="cl">[certificates] Generated ca certificate and key.
</span></span><span class="line"><span class="cl">[certificates] Generated apiserver certificate and key.
</span></span><span class="line"><span class="cl">[certificates] apiserver serving cert is signed for DNS names [node1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.0.18]
</span></span><span class="line"><span class="cl">[certificates] Generated apiserver-kubelet-client certificate and key.
</span></span><span class="line"><span class="cl">[certificates] Generated sa key and public key.
</span></span><span class="line"><span class="cl">[certificates] Generated front-proxy-ca certificate and key.
</span></span><span class="line"><span class="cl">[certificates] Generated front-proxy-client certificate and key.
</span></span><span class="line"><span class="cl">[certificates] Generated etcd/ca certificate and key.
</span></span><span class="line"><span class="cl">[certificates] Generated etcd/server certificate and key.
</span></span><span class="line"><span class="cl">[certificates] etcd/server serving cert is signed for DNS names [node1 localhost] and IPs [127.0.0.1 ::1]
</span></span><span class="line"><span class="cl">[certificates] Generated etcd/peer certificate and key.
</span></span><span class="line"><span class="cl">[certificates] etcd/peer serving cert is signed for DNS names [node1 localhost] and IPs [192.168.0.18 127.0.0.1 ::1]
</span></span><span class="line"><span class="cl">[certificates] Generated etcd/healthcheck-client certificate and key.
</span></span><span class="line"><span class="cl">[certificates] Generated apiserver-etcd-client certificate and key.
</span></span><span class="line"><span class="cl">[certificates] valid certificates and keys now exist in &#34;/etc/kubernetes/pki&#34;
</span></span><span class="line"><span class="cl">[kubeconfig] Wrote KubeConfig file to disk: &#34;/etc/kubernetes/admin.conf&#34;
</span></span><span class="line"><span class="cl">[kubeconfig] Wrote KubeConfig file to disk: &#34;/etc/kubernetes/kubelet.conf&#34;
</span></span><span class="line"><span class="cl">[kubeconfig] Wrote KubeConfig file to disk: &#34;/etc/kubernetes/controller-manager.conf&#34;
</span></span><span class="line"><span class="cl">[kubeconfig] Wrote KubeConfig file to disk: &#34;/etc/kubernetes/scheduler.conf&#34;
</span></span><span class="line"><span class="cl">[controlplane] wrote Static Pod manifest for component kube-apiserver to &#34;/etc/kubernetes/manifests/kube-apiserver.yaml&#34;
</span></span><span class="line"><span class="cl">[controlplane] wrote Static Pod manifest for component kube-controller-manager to &#34;/etc/kubernetes/manifests/kube-controller-manager.yaml&#34;
</span></span><span class="line"><span class="cl">[controlplane] wrote Static Pod manifest for component kube-scheduler to &#34;/etc/kubernetes/manifests/kube-scheduler.yaml&#34;
</span></span><span class="line"><span class="cl">[etcd] Wrote Static Pod manifest for a local etcd instance to &#34;/etc/kubernetes/manifests/etcd.yaml&#34;
</span></span><span class="line"><span class="cl">[init] waiting for the kubelet to boot up the control plane as Static Pods from directory &#34;/etc/kubernetes/manifests&#34;
</span></span><span class="line"><span class="cl">[init] this might take a minute or longer if the control plane images have to be pulled
</span></span><span class="line"><span class="cl">[apiclient] All control plane components are healthy after 51.503514 seconds
</span></span><span class="line"><span class="cl">[uploadconfig] storing the configuration used in ConfigMap &#34;kubeadm-config&#34; in the &#34;kube-system&#34; Namespace
</span></span><span class="line"><span class="cl">[kubelet] Creating a ConfigMap &#34;kubelet-config-1.11&#34; in namespace kube-system with the configuration for the kubelets in the cluster
</span></span><span class="line"><span class="cl">[markmaster] Marking the node node1 as master by adding the label &#34;node-role.kubernetes.io/master=&#39;&#39;&#34;
</span></span><span class="line"><span class="cl">[markmaster] Marking the node node1 as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]
</span></span><span class="line"><span class="cl">[patchnode] Uploading the CRI Socket information &#34;/var/run/dockershim.sock&#34; to the Node API object &#34;node1&#34; as an annotation
</span></span><span class="line"><span class="cl">[bootstraptoken] using token: 5f1nyz.351cet8vt4g2ix78
</span></span><span class="line"><span class="cl">[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
</span></span><span class="line"><span class="cl">[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
</span></span><span class="line"><span class="cl">[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
</span></span><span class="line"><span class="cl">[bootstraptoken] creating the &#34;cluster-info&#34; ConfigMap in the &#34;kube-public&#34; namespace
</span></span><span class="line"><span class="cl">[addons] Applied essential addon: CoreDNS
</span></span><span class="line"><span class="cl">[addons] Applied essential addon: kube-proxy
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your Kubernetes master has initialized successfully!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">To start using your cluster, you need to run the following as a regular user:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  mkdir -p $HOME/.kube
</span></span><span class="line"><span class="cl">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
</span></span><span class="line"><span class="cl">  sudo chown $(id -u):$(id -g) $HOME/.kube/config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">You should now deploy a pod network to the cluster.
</span></span><span class="line"><span class="cl">Run &#34;kubectl apply -f [podnetwork].yaml&#34; with one of the options listed at:
</span></span><span class="line"><span class="cl">  https://kubernetes.io/docs/concepts/cluster-administration/addons/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">You can now join any number of machines by running the following on each node
</span></span><span class="line"><span class="cl">as root:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  kubeadm join 192.168.0.18:6443 --token 5f1nyz.351cet8vt4g2ix78 --discovery-token-ca-cert-hash sha256:d105d049cf090f7814473e5554b79e09cd13e4acfd8a56b09754ba9181d08fd8
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Waiting for api server to startup
</span></span><span class="line"><span class="cl">Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply
</span></span><span class="line"><span class="cl">daemonset.extensions/kube-proxy configured
</span></span><span class="line"><span class="cl">No resources found</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>初始化集群网络：</li>
</ol>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl apply -n kube-system -f  <span class="s2">&#34;https://cloud.weave.works/k8s/net?k8s-version=</span><span class="k">$(</span>kubectl version <span class="p">|</span> base64 <span class="p">|</span> tr -d <span class="s1">&#39;\n&#39;</span><span class="k">)</span><span class="s2">&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>输出如下：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">serviceaccount/weave-net created
</span></span><span class="line"><span class="cl">clusterrole.rbac.authorization.k8s.io/weave-net created
</span></span><span class="line"><span class="cl">clusterrolebinding.rbac.authorization.k8s.io/weave-net created
</span></span><span class="line"><span class="cl">role.rbac.authorization.k8s.io/weave-net created
</span></span><span class="line"><span class="cl">rolebinding.rbac.authorization.k8s.io/weave-net created
</span></span><span class="line"><span class="cl">daemonset.apps/weave-net created</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>执行下列初始化命令：</li>
</ol>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir -p <span class="nv">$HOME</span>/.kube
</span></span><span class="line"><span class="cl">cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config</span></span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>根据master节点上的提示，在新的web终端上执行：</li>
</ol>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubeadm join 192.168.0.18:6443 --token 5f1nyz.351cet8vt4g2ix78 --discovery-token-ca-cert-hash sha256:d105d049cf090f7814473e5554b79e09cd13e4acfd8a56b09754ba9181d08fd8</span></span></code></pre></td></tr></table>
</div>
</div><p>输出如下：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[preflight] running pre-flight checks
</span></span><span class="line"><span class="cl">        [WARNING DirAvailable--etc-kubernetes-manifests]: /etc/kubernetes/manifests is not empty
</span></span><span class="line"><span class="cl">        [WARNING FileAvailable--etc-kubernetes-pki-ca.crt]: /etc/kubernetes/pki/ca.crt already exists
</span></span><span class="line"><span class="cl">        [WARNING FileAvailable--etc-kubernetes-kubelet.conf]: /etc/kubernetes/kubelet.conf already exists
</span></span><span class="line"><span class="cl">        [WARNING RequiredIPVSKernelModulesAvailable]: error getting required builtin kernel modules: exit status 1(cut: /lib/modules/4.4.0-166-generic/modules.builtin: No such file or directory
</span></span><span class="line"><span class="cl">)
</span></span><span class="line"><span class="cl">        [WARNING Service-Docker]: docker service is not active, please run &#39;systemctl start docker.service&#39;
</span></span><span class="line"><span class="cl">        [WARNING FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist
</span></span><span class="line"><span class="cl">I1117 14:09:02.416363    7243 kernel_validator.go:81] Validating kernel version
</span></span><span class="line"><span class="cl">I1117 14:09:02.419283    7243 kernel_validator.go:96] Validating kernel config
</span></span><span class="line"><span class="cl">[preflight] The system verification failed. Printing the output from the verification:
</span></span><span class="line"><span class="cl">KERNEL_VERSION: 4.4.0-166-generic
</span></span><span class="line"><span class="cl">DOCKER_VERSION: 18.06.1-ce
</span></span><span class="line"><span class="cl">OS: Linux
</span></span><span class="line"><span class="cl">CGROUPS_CPU: enabled
</span></span><span class="line"><span class="cl">CGROUPS_CPUACCT: enabled
</span></span><span class="line"><span class="cl">CGROUPS_CPUSET: enabled
</span></span><span class="line"><span class="cl">CGROUPS_DEVICES: enabled
</span></span><span class="line"><span class="cl">CGROUPS_FREEZER: enabled
</span></span><span class="line"><span class="cl">CGROUPS_MEMORY: enabled
</span></span><span class="line"><span class="cl">        [WARNING SystemVerification]: docker version is greater than the most recently validated version. Docker version: 18.06.1-ce. Max validated version: 17.03
</span></span><span class="line"><span class="cl">        [WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module &#34;configs&#34;: output - &#34;&#34;, err - exit status 1
</span></span><span class="line"><span class="cl">        [WARNING Port-10250]: Port 10250 is in use
</span></span><span class="line"><span class="cl">[discovery] Trying to connect to API Server &#34;192.168.0.28:6443&#34;
</span></span><span class="line"><span class="cl">[discovery] Created cluster-info discovery client, requesting info from &#34;https://192.168.0.28:6443&#34;
</span></span><span class="line"><span class="cl">[discovery] Requesting info from &#34;https://192.168.0.28:6443&#34; again to validate TLS against the pinned public key
</span></span><span class="line"><span class="cl">[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server &#34;192.168.0.28:6443&#34;
</span></span><span class="line"><span class="cl">[discovery] Successfully established connection with API Server &#34;192.168.0.28:6443&#34;
</span></span><span class="line"><span class="cl">[kubelet] Downloading configuration for the kubelet from the &#34;kubelet-config-1.11&#34; ConfigMap in the kube-system namespace
</span></span><span class="line"><span class="cl">[kubelet] Writing kubelet configuration to file &#34;/var/lib/kubelet/config.yaml&#34;
</span></span><span class="line"><span class="cl">[kubelet] Writing kubelet environment file with flags to file &#34;/var/lib/kubelet/kubeadm-flags.env&#34;
</span></span><span class="line"><span class="cl">[preflight] Activating the kubelet service
</span></span><span class="line"><span class="cl">[tlsbootstrap] Waiting for the kubelet to perform the TLS Bootstrap...
</span></span><span class="line"><span class="cl">[patchnode] Uploading the CRI Socket information &#34;/var/run/dockershim.sock&#34; to the Node API object &#34;node1&#34; as an annotation
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This node has joined the cluster:
</span></span><span class="line"><span class="cl">* Certificate signing request was sent to master and a response
</span></span><span class="line"><span class="cl">  was received.
</span></span><span class="line"><span class="cl">* The Kubelet was informed of the new secure connection details.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Run &#39;kubectl get nodes&#39; on the master to see this node join the cluster.</span></span></code></pre></td></tr></table>
</div>
</div><p>多开几个实例，重复执行第四步，即可向Kubernetes集群中增加节点。</p>
<p>此时在master节点上执行<code>kubectl get nodes</code>查看节点所有节点状态：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[node1 ~]$ kubectl get nodes
</span></span><span class="line"><span class="cl">NAME      STATUS    ROLES     AGE       VERSION
</span></span><span class="line"><span class="cl">node1     Ready     master    19m       v1.11.3
</span></span><span class="line"><span class="cl">node2     Ready     &lt;none&gt;    2m        v1.11.3
</span></span><span class="line"><span class="cl">node3     Ready     &lt;none&gt;    1m        v1.11.3</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建nginx-deployment">创建nginx deployment</h3>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>node1 ~<span class="o">]</span>$ curl https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx-app.yaml &gt; nginx-app.yaml
</span></span><span class="line"><span class="cl">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span></span><span class="line"><span class="cl">                                 Dload  Upload   Total   Spent    Left  Speed
</span></span><span class="line"><span class="cl"><span class="m">100</span>   <span class="m">497</span>  <span class="m">100</span>   <span class="m">497</span>    <span class="m">0</span>     <span class="m">0</span>   <span class="m">1252</span>      <span class="m">0</span> --:--:-- --:--:-- --:--:--  <span class="m">1255</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>node1 ~<span class="o">]</span>$
</span></span><span class="line"><span class="cl"><span class="o">[</span>node1 ~<span class="o">]</span>$ kubectl apply -f nginx-app.yaml
</span></span><span class="line"><span class="cl">service/my-nginx-svc created
</span></span><span class="line"><span class="cl">deployment.apps/my-nginx created</span></span></code></pre></td></tr></table>
</div>
</div><p>此时查看nodes和pods：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>node1 ~<span class="o">]</span>$ kubectl get nodes
</span></span><span class="line"><span class="cl">NAME      STATUS    ROLES     AGE       VERSION
</span></span><span class="line"><span class="cl">node1     Ready     master    29m       v1.11.3
</span></span><span class="line"><span class="cl">node2     Ready     &lt;none&gt;    11m       v1.11.3
</span></span><span class="line"><span class="cl">node3     Ready     &lt;none&gt;    11m       v1.11.3
</span></span><span class="line"><span class="cl"><span class="o">[</span>node1 ~<span class="o">]</span>$
</span></span><span class="line"><span class="cl"><span class="o">[</span>node1 ~<span class="o">]</span>$ kubectl get pods
</span></span><span class="line"><span class="cl">NAME                        READY     STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">my-nginx-67594d6bf6-2cbbz   1/1       Running   <span class="m">0</span>          1m
</span></span><span class="line"><span class="cl">my-nginx-67594d6bf6-r2p6w   1/1       Running   <span class="m">0</span>          1m
</span></span><span class="line"><span class="cl">my-nginx-67594d6bf6-vjqn4   1/1       Running   <span class="m">0</span>          1m</span></span></code></pre></td></tr></table>
</div>
</div><p>参考来源：</p>
<ol>
<li><a href="https://github.com/cncf/toc/blob/master/DEFINITION.md"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/cncf/toc/blob/master/DEFINITION.md<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9C%8D%E5%8B%99"target="_blank" rel="external nofollow noopener noreferrer">https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9C%8D%E5%8B%99<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://zh.wikipedia.org/zh-cn/%E5%AE%A3%E5%91%8A%E5%BC%8F%E7%B7%A8%E7%A8%8B"target="_blank" rel="external nofollow noopener noreferrer">https://zh.wikipedia.org/zh-cn/%E5%AE%A3%E5%91%8A%E5%BC%8F%E7%B7%A8%E7%A8%8B<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34445114"target="_blank" rel="external nofollow noopener noreferrer">https://zhuanlan.zhihu.com/p/34445114<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://labs.play-with-k8s.com/"target="_blank" rel="external nofollow noopener noreferrer">https://labs.play-with-k8s.com/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ol>
]]></description></item></channel></rss>