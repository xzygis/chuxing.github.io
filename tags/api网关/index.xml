<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>API网关 - 标签 - Chu Xing</title><link>https://xzygis.github.io/tags/api%E7%BD%91%E5%85%B3/</link><description>API网关 - 标签 - Chu Xing</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xzygis@163.com (chuxing)</managingEditor><webMaster>xzygis@163.com (chuxing)</webMaster><lastBuildDate>Mon, 27 Jan 2020 22:51:43 +0000</lastBuildDate><atom:link href="https://xzygis.github.io/tags/api%E7%BD%91%E5%85%B3/" rel="self" type="application/rss+xml"/><item><title>API网关概述</title><link>https://xzygis.github.io/posts/20200127-introduction-of-api-gateway/</link><pubDate>Mon, 27 Jan 2020 22:51:43 +0000</pubDate><author>chuxing</author><guid>https://xzygis.github.io/posts/20200127-introduction-of-api-gateway/</guid><description><![CDATA[<h1 id="1-背景">1 背景</h1>
<ul>
<li>由于后端的微服务拆分，客户端通常需要请求多个服务获取所需数据。</li>
<li>不同客户端所需要的数据不一样。例如，PC需要的数据通常比移动端更加详细。</li>
<li>不同客户端网络环境差异大。例如，WAN vs LAN，移动网络 vs 非移动网络。</li>
<li>服务端实例的地址信息（IP + port）会动态更新。</li>
<li>微服务的拆分逻辑会变化，这种变化应该应该对客户端透明。</li>
<li>不同的服务可能采用不同的协议，有些协议是非web的。</li>
</ul>
<h1 id="2-什么是api网关">2 什么是API网关？</h1>
<p>API网关接收客户端的所有请求，并将请求路由到相应的后端服务，并提供接口聚合和协议转换。通常来说，API网关通过调用多个后端服务，并聚合结果的方式处理请求。它可将web协议转化为非web的内部后台协议。</p>
<!-- more -->
<p>核心功能：</p>
<ul>
<li>服务发现：</li>
<li>负载均衡：以某种算法分摊系统压力。</li>
<li>服务熔断：直接返回失败或者执行降价逻辑，防止雪崩。</li>
<li>流量控制：防止短时间内大量请求转发到后台压垮服务器。</li>
<li>认证鉴权：验证客户端的请求是否被授权。</li>
<li>灰度发布：</li>
</ul>
<p>其他功能：</p>
<ul>
<li>协议转换：web协议转非Web协议。</li>
<li>参数校验：对入参设置校验规则，由网关根据规则对无效请求进行过滤。</li>
<li>API管理：包括 API 的创建、测试、发布、下线、版本切换等。</li>
<li>监控告警：监控API请求次数、API调用延迟和API错误信息。</li>
<li>SDK生成：</li>
</ul>
<h1 id="3-实现方式">3 实现方式</h1>
<p>将API网关作为客户端的唯一接入点。API网关主要有两种类型：</p>
<ul>
<li>one-size-fits-all网关</li>
<li>Backends for frontends网关</li>
</ul>
<h2 id="31-one-size-fits-all网关">3.1 One-size-fits-all网关</h2>
<p>简单地将请求路由到相应服务。将请求扇出到多个后端服务。
</p>
<h2 id="32-backends-for-fronts网关">3.2 Backends for fronts网关</h2>
<p>为每种客户端暴露不同的API。为每种客户端设计一个API网关，每个API网关为其客户端提供一种API。
</p>
<h1 id="4-优点">4 优点</h1>
<ul>
<li>使后端的微服务拆分对客户端透明。</li>
<li>客户端无需关心后端服务的实例地址（IP + port）。</li>
<li>可为每个客户端提供最优API。</li>
<li>减少请求次数。</li>
<li>简化客户端的逻辑（由调用多个后台服务变为只调用API网关）。</li>
<li>可将标准的Web API协议转化为任意的后端协议。</li>
</ul>
<h1 id="5-缺点">5 缺点</h1>
<ul>
<li>增加复杂性。增加了API网关模块，带来了额外的开发、部署、管理成本。</li>
<li>增加响应时间。调用链路多了一跳（API网关）。</li>
</ul>
<blockquote>
<p><strong>Issues:</strong></p>
<p>How implement the API gateway?</p>
<p>event-driven/reactive approach is the best if it must scale to handle high loads.</p>
</blockquote>
<p>参考来源：</p>
<ul>
<li><a href="https://microservices.io/patterns/apigateway.html"target="_blank" rel="external nofollow noopener noreferrer">https://microservices.io/patterns/apigateway.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.nginx.com/learn/api-gateway/"target="_blank" rel="external nofollow noopener noreferrer">https://www.nginx.com/learn/api-gateway/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://aws.amazon.com/cn/api-gateway/features/"target="_blank" rel="external nofollow noopener noreferrer">https://aws.amazon.com/cn/api-gateway/features/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://cloud.tencent.com/document/product/628/11755"target="_blank" rel="external nofollow noopener noreferrer">https://cloud.tencent.com/document/product/628/11755<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item></channel></rss>